<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[油脂青年]]></title>
  <link href="https://xixiang.tech/atom.xml" rel="self"/>
  <link href="https://xixiang.tech/"/>
  <updated>2024-04-15T14:29:41+08:00</updated>
  <id>https://xixiang.tech/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[新增扩展步骤]]></title>
    <link href="https://xixiang.tech/17052846430341.html"/>
    <updated>2024-01-15T10:10:43+08:00</updated>
    <id>https://xixiang.tech/17052846430341.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E8%BF%9B%E5%85%A5hybris%E6%96%87%E4%BB%B6%E5%A4%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>进入hybris文件夹</h2>
<pre class="line-numbers"><code class="language-shell">user@macbook-pro platform % cd hybris/hybris/bin/platform/
</code></pre>
<h2><a id="%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>设置变量</h2>
<pre class="line-numbers"><code class="language-shell">user@macbook-pro platform % . ./setantenv.sh
</code></pre>
<h2><a id="ant-extgen" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>ant extgen</h2>
<pre class="line-numbers"><code class="language-shell">user@macbook-pro platform % ant extgen
... ... 
extgen:
    [input]
    [input] Please choose a template for generation.
    [input] Press [Enter] to use the default value (ybackoffice, ycockpit, [yempty], yatddtests, ywebservices, yhacext, ysmarteditmodule, yscala, ygroovy, ycommercewebservices, ycommercewebserviceshmc, ycommercewebservicestest, ycmssmartedit, yoccaddon, yaddon, yacceleratorstorefront, ychinaacceleratorstorefront, yacceleratorfractusfulfilmentprocess, yacceleratorordermanagement, yacceleratorfulfilmentprocess)

</code></pre>
<h2><a id="%E9%A1%B9%E7%9B%AE%E5%91%BD%E5%90%8D" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>项目命名</h2>
<pre class="line-numbers"><code class="language-shell">    [input]
    [input] Please choose the name of your extension. It has to start with a letter followed by letters and/or numbers.
    [input] Press [Enter] to use the default value [training]
</code></pre>
<h2><a id="%E5%8C%85%E5%91%BD%E5%90%8D" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>包命名</h2>
<pre class="line-numbers"><code class="language-shell">
    [input]
    [input] Please choose the package name of your extension. It has to fulfill java package name convention.
    [input] Press [Enter] to use the default value [org.training]
</code></pre>
<h2><a id="%E6%B7%BB%E5%8A%A0%E6%89%A9%E5%B1%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>添加扩展</h2>
<pre class="line-numbers"><code class="language-shell">     [echo]
     [echo]     Next steps:
     [echo]
     [echo] 1) Add your extension to your /hybris/hybris/config/localextensions.xml
     [echo]
     [echo]      &lt;extension dir=&quot;/hybris/hybris/bin/custom/training&quot;/&gt;
     [echo]
     [echo] 2) Please remove all template extensions (again) before you proceed.
     [echo]
     [echo] 3) Make sure the applicationserver is stopped before you build the extension the first time.
     [echo]
     [echo] 4) Perform 'ant' in your hybris/platform directory.
     [echo]
     [echo] 5) Restart the applicationserver
     [echo]
     [echo]   
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更新系统]]></title>
    <link href="https://xixiang.tech/16998408119487.html"/>
    <updated>2023-11-13T10:00:11+08:00</updated>
    <id>https://xixiang.tech/16998408119487.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-shell">yum update
</code></pre>
<h1><a id="%E5%AE%89%E8%A3%85%E5%BF%85%E8%A6%81%E7%9A%84%E4%BE%9D%E8%B5%96" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>安装必要的依赖</h1>
<pre class="line-numbers"><code class="language-shell"># 安装了一组常用的开发工具，包括编译器等。
yum groupinstall &quot;Development Tools&quot; 
# 安装了一些特定的开发库和工具，这些库在编译Python时可能需要，比如gcc编译器、OpenSSL、bzip2、libffi和zlib。
yum install -y gcc openssl-devel bzip2-devel libffi-devel zlib-devel 
</code></pre>
<h1><a id="%E4%B8%8B%E8%BD%BDpython-3-7-9%E6%BA%90%E4%BB%A3%E7%A0%81" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>下载Python 3.7.9源代码</h1>
<pre class="line-numbers"><code class="language-shell">wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz
</code></pre>
<h1><a id="%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%BA%90%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>解压缩源代码文件</h1>
<pre class="line-numbers"><code class="language-shell">tar zxvf Python-3.7.9.tgz
</code></pre>
<h1><a id="%E8%BF%9B%E5%85%A5%E8%A7%A3%E5%8E%8B%E5%90%8E%E7%9A%84%E7%9B%AE%E5%BD%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>进入解压后的目录</h1>
<pre class="line-numbers"><code class="language-shell">cd Python-3.7.9
</code></pre>
<h1><a id="%E9%85%8D%E7%BD%AE%E5%92%8C%E7%BC%96%E8%AF%91python" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>配置和编译Python</h1>
<pre class="line-numbers"><code class="language-shell">./configure --enable-optimizations
make -j 4  # 根据系统资源配置合适的线程数
</code></pre>
<h1><a id="%E5%AE%89%E8%A3%85python" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>安装Python</h1>
<pre class="line-numbers"><code class="language-shell"># 注意使用`make altinstall`而不是`make install`，这样可以避免覆盖系统默认的Python版本。
make altinstall
#如果出现错误，可能缺少依赖需要下载再次执行
make clean
./configure --enable-optimizations
make -j 4  # 根据系统资源配置合适的线程数
make altinstall
</code></pre>
<h1><a id="%E6%A3%80%E6%9F%A5python%E7%89%88%E6%9C%AC" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>检查Python版本</h1>
<pre class="line-numbers"><code class="language-shell">python3.7 --version
</code></pre>
<h1><a id="%E6%9B%B4%E6%96%B0pip" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>更新pip</h1>
<pre class="line-numbers"><code class="language-shell">/usr/local/bin/python3.7 -m pip install -i pypi.tuna.tsinghua.edu.cn/simple --upgrade pip

# 或者
/usr/local/bin/python3.7 -m ensurepip
/usr/local/bin/python3.7 -m pip install --upgrade pip
</code></pre>
<h1><a id="git%E4%BB%A3%E7%A0%81" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>git代码</h1>
<pre class="line-numbers"><code class="language-shell">git clone https://gitee.com/gu-yang/pandora.git
</code></pre>
<h1><a id="" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a></h1>
<pre class="line-numbers"><code class="language-shell">cd pandora/  &amp;&amp; pip install .
pandora
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker 基本操作]]></title>
    <link href="https://xixiang.tech/16977928576957.html"/>
    <updated>2023-10-20T17:07:37+08:00</updated>
    <id>https://xixiang.tech/16977928576957.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E5%AE%89%E8%A3%85docker" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>安装 Docker</h2>
<p>下载 docker.sh 文件</p>
<pre class="line-numbers"><code class="language-shell">curl -o docker.sh -ssL https://get.docker.com

# 执行权限
chmod +x docker.sh
</code></pre>
<p>以阿里云镜像安装 docker.sh 脚本内容</p>
<pre class="line-numbers"><code class="language-shell">sudo sh docker.sh --mirror Aliyun
yum install -y -q docker-ce
</code></pre>
<p>启动 Docker</p>
<pre class="line-numbers"><code class="language-shell">systemctl start docker

# 设置开机启动 Docker
systemctl enable docker
</code></pre>
<h2><a id="%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>容器命令</h2>
<pre class="line-numbers"><code class="language-shell"># 使用此目录的 Dockerfile 创建镜像
docker build -t friendlyname

# 运行端口 4000 到 80 的“名称”映射
docker run -p 4000:80 friendlyname	

# 内容相同，但在分离模式下
docker run -d -p 4000:80 friendlyname

# 查看所有正在运行的容器的列表
docker ps

# 查看所有容器的列表，甚至包含未运行的容器
docker ps -a

# 平稳地停止指定的容器
docker stop &lt;CONTAINER ID&gt;	

# 强制关闭指定的容器
docker kill &lt;CONTAINER ID&gt;	

# 从此机器中删除指定的容器
docker rm &lt;CONTAINER ID&gt;	

#  从此机器中删除所有容器
docker rm $(docker ps -a -q)
</code></pre>
<h2><a id="%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>镜像命令</h2>
<pre class="line-numbers"><code class="language-shell"># 显示此机器上的所有镜像
docker images -a

# 从此机器中删除指定的镜像
docker rmi &lt;imagename&gt;	

# 从此机器中删除所有镜像
docker rmi $(docker images -q)	

# 进入正在运行的镜像
docker exec -it mysql bash

# 退出正在运行的镜像
exit
</code></pre>
<h2><a id="docker%E4%BB%93%E5%BA%93%E5%91%BD%E4%BB%A4" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Docker 仓库命令</h2>
<pre class="line-numbers"><code class="language-shell">
# 使用您的 Docker 凭证登录此 CLI 会话
docker login

# 标记 &lt;image&gt; 以上传到镜像库
docker tag &lt;image&gt; username/repository:tag

# 将已标记的镜像上传到镜像库
docker push username/repository:tag

# 拉取
docker pull username/repository:tag

# 运行镜像库中的镜像
docker run -p 4000:80 username/repository:tag

# 后台运行镜像库中的镜像
docker run -d -p 4000:80 username/repository:tag

# 示例
docker run -d -p 10022:22 -p 10080:3000 --name=gogs -v /var/gogs/:/data penghuicai/gogs:0.11.53

# 查看信息
docker inspect gogs

# 提交修改后的镜像
docker commit CONTAINER_ID imagename
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程池线程复用InheritableThreadLocal值传递问题解决]]></title>
    <link href="https://xixiang.tech/16957928971305.html"/>
    <updated>2023-09-27T13:34:57+08:00</updated>
    <id>https://xixiang.tech/16957928971305.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%BB%8B%E7%BB%8D" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>介绍</h2>
<p><code>InheritableThreadLocal</code> 是 <code>Java</code> 中的一个线程本地变量（<code>ThreadLocal</code>）实现，与普通的 ThreadLocal 一样，InheritableThreadLocal 是线程安全的。每个线程都有自己的副本，互不干扰。同时它允许在父线程与子线程之间传递共享值的工具。<br />
它允许在父线程中设置一个值，*当父线程创建子线程时，通过<code>Thread</code>类的<code>构造函数</code>和<code>Thread</code>类内部的机制来实现子线程继承父线程的 <code>InheritableThreadLocal</code> 值。*用于解决多线程应用程序中传递上下文信息或共享特定的数据的问题。</p>
<h2><a id="%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>问题分析</h2>
<p>线程池实现（如 <code>ThreadPoolTaskExecutor</code>等）会提供线程池的池化功能，即在执行任务完成后不立即销毁线程，而是将线程放回线程池中以供下次再次使用。<br />
那么当我们使用这些线程池的线程时，并不是每次都通过创建<code>Thread</code>获得线程，只有当线程池中没有可用线程并且可以创建线程的时候才会通过创建<code>Thread</code>获得线程。如果存在可用线程就会直接在线程池中获取可用线程。<br />
通过<code>InheritableThreadLocal</code>介绍可以了解到，子线程继承父线程的 <code>InheritableThreadLocal</code> 值是通过<code>Thread</code>类的<code>构造函数</code>和<code>Thread</code>类内部的机制的方式来获取。<br />
当线程获取为在线程池中获取可用线程时，是的<code>InheritableThreadLocal</code> 的值还是残留第一次传递进来值，就是导致结果与预期结果不一致的问题。</p>
<h2><a id="%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>解决问题</h2>
<ol>
<li>通过第三方<code>jar</code>包（如 alibaba 开源 github地址：<a href="https://github.com/alibaba/transmittable-thread-local"> transmittable-thread-local</a>）</li>
<li>自定义<code>Runnable</code> + <code>ConcurrentHashMap</code>实现</li>
</ol>
<h2><a id="%E9%87%8D%E5%86%99runnable%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>重写<code>Runnable</code>实现方案</h2>
<h4><a id="%E5%88%9B%E5%BB%BAthreadmemorycache%E7%B1%BB%E7%BC%93%E5%AD%98%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>创建ThreadMemoryCache类缓存关联关系</h4>
<pre class="line-numbers"><code class="language-java">package com.springboot.demo.thread.pool.demo;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class ThreadMemoryCache {

    private static final Logger LOG = LoggerFactory.getLogger(ThreadMemoryCache.class);

    public static final String STATUS = &quot;STATUS&quot;;

    public static final Map&lt;Long, Long&gt; childRelParentThreadMap = new ConcurrentHashMap&lt;&gt;();
    public static final Map&lt;Long, Map&lt;String, Object&gt;&gt; parentRelValuesThreadMap = new ConcurrentHashMap&lt;&gt;();

    /**
     * 子线程调用，创建子线程与主线程关联关系
     *
     * @param parentId 主线程ID
     */
    public static void putChildRelParent(Long parentId) {
        Thread thread = Thread.currentThread();
        LOG.debug(&quot;子线程调用，创建子线程与主线程关联关系 childName[{}] childId[{}] parentId[{}]&quot;, thread.getName(), thread.getId(), parentId);
        childRelParentThreadMap.put(thread.getId(), parentId);
    }


    /**
     * 子线程调用，移除子线程与主线程关联关系创建
     */
    public static void removeChildRelParent() {
        Thread thread = Thread.currentThread();
        LOG.debug(&quot;子线程调用，移除子线程与主线程关联关系 childName[{}] childId[{}]&quot;, thread.getName(), thread.getId());
        childRelParentThreadMap.remove(thread.getId());
    }

    /**
     * 子线程调用，获取主线程关联的信息
     *
     * @return 主线程关联的信息
     */
    public static Map&lt;String, Object&gt; getParentRelValues() {
        Thread thread = Thread.currentThread();
        Long parentId = childRelParentThreadMap.get(thread.getId());
        if (null != parentId) {
            LOG.debug(&quot;子线程调用，获取主线程关联的信息 childName[{}] childId[{}] parentId[{}]&quot;, thread.getName(), thread.getId(), parentId);
            return parentRelValuesThreadMap.get(parentId);
        } else {
            LOG.debug(&quot;主线程调用，获取主线程关联的信息 currentName[{}] currentId[{}]&quot;, thread.getName(), thread.getId());
            return parentRelValuesThreadMap.get(thread.getId());
        }
    }

    /**
     * 创建主线程关联的参数
     *
     * @param values 参数集合
     */
    public static void putParentRelValues(Map&lt;String, Object&gt; values) {
        Thread thread = Thread.currentThread();
        LOG.warn(&quot;创建主线程关联的参数 parentName[{}] parentId[{}] values[{}]&quot;, thread.getName(), thread.getId(), values);
        parentRelValuesThreadMap.put(thread.getId(), values);
    }

    /**
     * 移除主线程的关联信息
     */
    public static void removeParentRelValues() {
        Thread thread = Thread.currentThread();
        LOG.warn(&quot;移除主线程的关联信息 parentName[{}] parentId[{}]&quot;, thread.getName(), thread.getId());
        parentRelValuesThreadMap.remove(thread.getId());
    }
}
</code></pre>
<h4><a id="%E8%87%AA%E5%AE%9A%E4%B9%89inheritablethreadlocalrunnable%E5%AE%9E%E7%8E%B0runnable" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>自定义InheritableThreadLocalRunnable实现Runnable</h4>
<pre class="line-numbers"><code class="language-java">public abstract class InheritableThreadLocalRunnable implements Runnable{

    private final long parentThreadId;

    public InheritableThreadLocalRunnable() {
        // 该构造函数被调用时候，获取调用者线程ID(父线程ID)
        this.parentThreadId = Thread.currentThread().getId();
    }


    @Override
    public void run() {
        try {
            beforeExecute();
            execute();
        } finally {
            afterExecute();
        }
    }

    private void beforeExecute() {
        ThreadMemoryCache.putChildRelParent(this.parentThreadId);
    }

    private void afterExecute() {
        ThreadMemoryCache.removeChildRelParent();
    }

    /**
     * 执行多线程操作
     */
    protected abstract void execute();

    public long getParentThreadId() {
        return parentThreadId;
    }

}
</code></pre>
<h4><a id="threadpooltaskexecutor-demo" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>ThreadPoolTaskExecutor Demo</h4>
<pre class="line-numbers"><code class="language-java">import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public class Demo {

    private static final Logger LOG = LoggerFactory.getLogger(Demo.class);
    private static final ThreadPoolTaskExecutor threadPool = new ThreadPoolTaskExecutor();
    private static final AtomicInteger max = new AtomicInteger(2);

    public static void main(String[] args) throws InterruptedException {
        setThreadPool();
        test(&quot;PENDING&quot;);
        test(&quot;SKIP&quot;);
        threadPool.destroy();
    }

    static void test(String status) throws InterruptedException {
        max.addAndGet(2);

        Map&lt;String, Object&gt; parentValues = new HashMap&lt;&gt;(1);
        parentValues.put(ThreadMemoryCache.STATUS, status);
        ThreadMemoryCache.putParentRelValues(parentValues);

        for (int i = 0; i &lt; 2; i++) {
            threadPool.submit(new InheritableThreadLocalRunnable() {
                @Override
                protected void execute() {
                    LOG.info(getStatus());
                    max.decrementAndGet();
                }
            });
        }
        while (true) {
            if (max.get() == 0) {
                ThreadMemoryCache.removeParentRelValues();
                break;
            }
            waitingFinished();
        }
    }

    static String getStatus() {
        Map&lt;String, Object&gt; cacheMap = ThreadMemoryCache.getParentRelValues();
        if (cacheMap.isEmpty()) {
            LOG.error(ThreadMemoryCache.STATUS);
        }
        return (String) cacheMap.get(ThreadMemoryCache.STATUS);
    }

    static void waitingFinished() throws InterruptedException {
        TimeUnit.MILLISECONDS.sleep(100);
    }


    static void setThreadPool() {
        threadPool.setCorePoolSize(2);
        threadPool.setMaxPoolSize(10);
        threadPool.setQueueCapacity(10);
        threadPool.setKeepAliveSeconds(3000);
        threadPool.setThreadNamePrefix(&quot;thread-&quot;);
        threadPool.setWaitForTasksToCompleteOnShutdown(true);
        threadPool.initialize();
    }
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置-Configuring]]></title>
    <link href="https://xixiang.tech/16896696598439.html"/>
    <updated>2023-07-18T16:40:59+08:00</updated>
    <id>https://xixiang.tech/16896696598439.html</id>
    <content type="html"><![CDATA[
<p>SAP Commerce 拥有大量配置参数，可为各种解决方案指定运行时设置。包括数据库、应用服务器等。</p>
<h2><a id="%E4%BF%AE%E6%94%B9%E6%96%B9%E5%BC%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>修改方式</h2>
<ol>
<li>在运行时修改参数：在运行时修改参数会立即影响SAP Commerce的行为。但是，以这种方式进行的更改仅存储在内存中，非持久的。一旦重启应用服务器，所有值都将从配置文件重新加载，更改将丢失。除非将其持久化在配置文件中。<br />
要在运行时修改SAP Commerce的行为，请使用SAP Commerce管理控制台。<br />
<a href="https://hybris.local/hac/platform/config">https://hybris.local/hac/platform/config</a></li>
<li>在启动之前修改配置文件：在启动之前修改配置文件也可以调整SAP Commerce的行为。这些更改是持久的，会在每次启动时应用。</li>
</ol>
<h2><a id="%E9%85%8D%E7%BD%AE%E5%AE%9A%E4%B9%89%E7%A4%BA%E4%BE%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>配置定义示例</h2>
<pre class="line-numbers"><code class="language-plain_text"># “#” 注释 
# 因为解析机制一次读入整行，并使用等号 (=) 后面的任何字符作为属性值，因此请确保避免三个可能的问题来源：
# 1. 删除行尾的所有空白和空格。
# 2. 注释需要单独的一行，不要在定义属性值的行后面添加注释
# 3. 包含哈希值的属性值，需要在哈希值前面加上双反斜杠
# 3.1 示例  myproperty=contains a hash \\#

db.url=jdbc:hsqldb:file:&lt;at:var at:name=&quot;EXPLODED_EAR&quot; /&gt;/mydb;hsqldb.cache_scale=16;shutdown=true
db.driver=org.hsqldb.jdbcDriver
db.username=sa
db.password=
db.tableprefix=
hsqldb.usecachedtables=false
</code></pre>
<h2><a id="%E9%85%8D%E7%BD%AE%E5%80%BC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%BC%98%E5%85%88%E7%BA%A7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>配置值配置文件使用优先级</h2>
<p>从高到低</p>
<pre class="line-numbers"><code class="language-plain_text">local.properties &gt; [扩展] project.properties &gt; [原厂] project.properties &gt; 应用程序代码默认值
</code></pre>
<h2><a id="%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E5%80%BC" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>读取配置值</h2>
<p>要获取一个属性的值，你可以在代码中使用专用的API。另外，您也可以通过向Spring配置的对象实例注入值来获取属性值。它提供了一个更易于测试的解决方案，并且更加松耦合。</p>
<p>spring 注入<br />
该机制无法识别租户。您将始终获得主导租户的属性，并且无法识别在运行时对属性所做的更改。由于配置器是一个 BeanFactoryPostProcessor ，它在上下文启动时被应用一次。</p>
<pre class="line-numbers"><code class="language-spring">&lt;bean class=&quot;Foo&quot;&gt;
  &lt;property name=&quot;bar&quot; value=&quot;${key_of_property}&quot;/&gt;
&lt;/bean&gt;
</code></pre>
<p><a href="https://help.sap.com/docs/SAP_COMMERCE/b490bb4e85bc42a7aa09d513d0bcb18e/8b8e13c9866910149d40b151a9196543.html?locale=en-US">https://help.sap.com/docs/SAP_COMMERCE/b490bb4e85bc42a7aa09d513d0bcb18e/8b8e13c9866910149d40b151a9196543.html?locale=en-US</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译 Maven 问题]]></title>
    <link href="https://xixiang.tech/16879199400527.html"/>
    <updated>2023-06-28T10:39:00+08:00</updated>
    <id>https://xixiang.tech/16879199400527.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-log">Buildfile: /hybris/bin/platform/build.xml
     [echo] cleaning library folder /hybris/bin/platform/lib/dbdriver/
[artifact:mvn] Downloading: org/apache/maven/apache-maven/3.2.5/apache-maven-3.2.5.pom from repository central at http://repo1.maven.org/maven2
[artifact:mvn] Error transferring file: Server returned HTTP response code: 501 for URL: http://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.2.5/apache-maven-3.2.5.pom
[artifact:mvn] [WARNING] Unable to get resource 'org.apache.maven:apache-maven:pom:3.2.5' from repository central (http://repo1.maven.org/maven2): Error transferring file: Server returned HTTP response code: 501 for URL: http://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.2.5/apache-maven-3.2.5.pom
[artifact:mvn] Downloading: org/apache/maven/apache-maven/3.2.5/apache-maven-3.2.5.pom from repository central at http://repo1.maven.org/maven2
[artifact:mvn] Error transferring file: Server returned HTTP response code: 501 for URL: http://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.2.5/apache-maven-3.2.5.pom
[artifact:mvn] [WARNING] Unable to get resource 'org.apache.maven:apache-maven:pom:3.2.5' from repository central (http://repo1.maven.org/maven2): Error transferring file: Server returned HTTP response code: 501 for URL: http://repo1.maven.org/maven2/org/apache/maven/apache-maven/3.2.5/apache-maven-3.2.5.pom
     [null] An error has occurred while processing the Maven artifact tasks.
     [null]  Diagnosis:
     [null]
     [null] Unable to resolve artifact: Missing:
     [null] ----------
     [null] 1) org.apache.maven:apache-maven:pom:3.2.5
     [null]   Path to dependency:
     [null]     1) org.apache.maven:super-pom:pom:2.0
     [null]     2) org.apache.maven:apache-maven:pom:3.2.5
     [null]
     [null] ----------
     [null] 1 required artifact is missing.
     [null]
     [null] for artifact:
     [null]   org.apache.maven:super-pom:pom:2.0
     [null]
     [null] from the specified remote repositories:
     [null]   central (http://repo1.maven.org/maven2)
     [null]
     [null]

BUILD FAILED
/hybris/bin/platform/build.xml:16: The following error occurred while executing this line:
/hybris/bin/platform/resources/ant/antmacros.xml:86: The following error occurred while executing this line:
/hybris/bin/platform/resources/ant/mavenTasks.xml:402: Unable to resolve artifact: Missing:
----------
1) org.apache.maven:apache-maven:pom:3.2.5
  Path to dependency:
        1) org.apache.maven:super-pom:pom:2.0
        2) org.apache.maven:apache-maven:pom:3.2.5

----------
1 required artifact is missing.

for artifact:
  org.apache.maven:super-pom:pom:2.0

from the specified remote repositories:
  central (http://repo1.maven.org/maven2)

Total time: 1 second 
</code></pre>
<p>自2020年1月15日起，出于 <a href="https://blog.sonatype.com/central-repository-moving-to-https">安全原因</a> maven中央仓库不再支持通过 <code>http://repo1.maven.org/maven2</code> 访问。不幸的是 hybris 在底层使用了 <a href="https://maven.apache.org/ant-tasks/">ant-maven-task</a>，它自 2011 年以来就不再维护，并且硬编码了默认值指向 maven 中央仓库的 <code>http</code> 版本的链接。</p>
<h2><a id="%E6%BA%90%E7%A0%81" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>源码</h2>
<p>bin/platform/resources/ant/lib/maven-ant-tasks-2.1.3.jar</p>
<blockquote>
<p>org.apache.maven.artifact.ant.AbstractArtifactWithRepositoryTask#getDefaultRemoteRepository<br />
<img src="media/16879199400527/16879242112331.jpg" alt="" style="width:657px;" /></p>
</blockquote>
<blockquote>
</blockquote>
<p>org.apache.maven.artifact.ant.AbstractArtifactTask#initSettings<br />
<img src="media/16879199400527/16879242969801.jpg" alt="" style="width:961px;" /></p>
<h3><a id="%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%88%9B%E5%BB%BAsettings-xml%E5%B9%B6%E6%94%BE%E5%9C%A8%E6%8C%87%E5%AE%9A%E5%9C%B0%E7%82%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>我们需要创建 settings.xml 并放在指定地点</h3>
<pre class="line-numbers"><code class="language-plain_text">&lt;settings&gt;
    &lt;mirrors&gt;
        &lt;mirror&gt;
            &lt;id&gt;central.mirror&lt;/id&gt;
            &lt;url&gt;https://repo1.maven.org/maven2/&lt;/url&gt;
            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
        &lt;/mirror&gt;
    &lt;/mirrors&gt;
&lt;/settings&gt;
</code></pre>
<pre class="line-numbers"><code class="language-plain_text">$USER_HOME/.ant/settings.xml

$USER_HOME/.m2/settings.xml

$ANT_HOME/etc/settings.xml
</code></pre>
<p><a href="https://clutcher.github.io/post/hybris/maven_central_repository_http_issue/">maven_central_repository_http_issue</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim 常用命令]]></title>
    <link href="https://xixiang.tech/16871455029215.html"/>
    <updated>2023-06-19T11:31:42+08:00</updated>
    <id>https://xixiang.tech/16871455029215.html</id>
    <content type="html"><![CDATA[
<p>在 Vim 编辑器中，您可以使用以下键盘快捷键执行以下操作：</p>
<ol>
<li>
<p>移动到文件开头：</p>
<ul>
<li>按下 <code>gg</code>：将光标移动到文件的开头。</li>
</ul>
</li>
<li>
<p>移动到文件末尾：</p>
<ul>
<li>按下 <code>G</code>：将光标移动到文件的末尾。</li>
</ul>
</li>
<li>
<p>上一页和下一页：</p>
<ul>
<li>上一页：按下 <code>Ctrl + B</code> 或者按下 <code>Ctrl + U</code>：向上滚动一页。</li>
<li>下一页：按下 <code>Ctrl + F</code> 或者按下 <code>Ctrl + D</code>：向下滚动一页。</li>
</ul>
</li>
<li>
<p>复制一行并将其粘贴到其他位置：</p>
<ul>
<li>将光标移动到要复制的行上。</li>
<li>按下 <code>yy</code>：复制当前行。</li>
<li>将光标移动到粘贴的位置。</li>
<li>按下 <code>p</code>：在当前行的下方粘贴复制的行。</li>
<li>按下大写字母 <code>P</code>：在当前行的上方粘贴复制的行。</li>
</ul>
</li>
<li>
<p>删除一行：</p>
<ul>
<li>将光标移动到要删除的行上。</li>
<li>按下 <code>dd</code>：删除当前行。</li>
</ul>
</li>
<li>
<p>搜索和替换：</p>
<ul>
<li><code>/pattern</code>：向下搜索指定的模式</li>
<li><code>?pattern</code>：向上搜索指定的模式</li>
<li><code>n</code>：在搜索结果中定位到下一个匹配项</li>
<li><code>N</code>：在搜索结果中定位到上一个匹配项</li>
</ul>
</li>
<li>
<p>撤销和重做：</p>
<ul>
<li><code>u</code>：撤销上一次操作</li>
<li><code>Ctrl + r</code>：重做撤销的操作</li>
</ul>
</li>
<li>
<p>保存和退出：</p>
<ul>
<li><code>:w</code>：保存文件</li>
<li><code>:q</code>：退出编辑器</li>
<li><code>:wq</code>：保存文件并退出编辑器</li>
</ul>
</li>
</ol>
<p>这些快捷键在 Vim 编辑器中是通用的，可用于在文本编辑过程中进行导航、复制和删除操作。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LNMP一键包安装后解决MySQL无法远程连接问题]]></title>
    <link href="https://xixiang.tech/16868095270538.html"/>
    <updated>2023-06-15T14:12:07+08:00</updated>
    <id>https://xixiang.tech/16868095270538.html</id>
    <content type="html"><![CDATA[
<ol>
<li>没有给root对应的权限</li>
<li>MySQL/MariaDB无法远程连接</li>
</ol>
<p>为了安全LNMP默认是禁止远程连接的<a href="https://bbs.vpser.net/thread-13563-1-1.html">开启方法</a></p>
<p>直接通过iptables进行操作</p>
<pre class="line-numbers"><code class="language-shell">#1. 查看已有的iptables规则，以序号显示

iptables -L -n --line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination   
6    DROP       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3306 

# 2. 删除对应的DROP规则
iptables -D INPUT 5

# 3. 验证执行结果
iptables -L -n --line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination
7    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:3306
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一、外部交互相关规范]]></title>
    <link href="https://xixiang.tech/16861906037918.html"/>
    <updated>2023-06-08T10:16:43+08:00</updated>
    <id>https://xixiang.tech/16861906037918.html</id>
    <content type="html"><![CDATA[
<ul>
<li>所有与外部交互的<code>接口</code>、<code>SDK</code>信息都应该保存在<code>WsInterfaceConfig</code>。</li>
<li>各个环境之间通过<code>env</code>字段进行区分环境</li>
<li>通过统一的公共方法<code>（com.hand.ec.util.common.WsInterfaceConfigUtil#getInterfaceConifg）</code>获取<code>接口</code>、<code>SDK</code>信息。</li>
</ul>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>code</td>
<td>接口编码</td>
<td></td>
</tr>
<tr>
<td>env</td>
<td>环境标识</td>
<td></td>
</tr>
<tr>
<td>systemType</td>
<td>系统类型</td>
<td></td>
</tr>
<tr>
<td>enableFlag</td>
<td>启用标识</td>
<td></td>
</tr>
<tr>
<td>resourceUrl</td>
<td>接口地址</td>
<td></td>
</tr>
<tr>
<td>userName</td>
<td>用户名</td>
<td></td>
</tr>
<tr>
<td>password</td>
<td>密码</td>
<td></td>
</tr>
<tr>
<td>cloudKey</td>
<td>平台应用编码</td>
<td></td>
</tr>
<tr>
<td>appSecret</td>
<td>平台应用校验码</td>
<td></td>
</tr>
<tr>
<td>sessionKey</td>
<td>网站授权码</td>
<td></td>
</tr>
</tbody>
</table>
<h2><a id="%E4%BA%8C%E3%80%81jedis%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>二、Jedis使用规范</h2>
<ul>
<li>统一使用<code>语法糖方式</code>使用，避免忘记关闭 Jedis 连接，导致连接池撑爆</li>
</ul>
<p><strong>语法糖示例</strong></p>
<pre class="line-numbers"><code class="language-java">try (Jedis jedis = redisInstanceManager.getResource()) {
    operation(jedis);
} catch (Exception e) {
    LOG.error(e.getMessage(), e);
}
</code></pre>
<p><em><strong>禁止使用以下方式，未使用语法糖</strong></em></p>
<pre class="line-numbers"><code class="language-java">Jedis jedis = null;
try {
    jedis = redisInstanceManager.getResource();
    operation(jedis);
} catch (Exception e) {
    LOG.error(e.getMessage(), e);
} finally {
    if (null != jedis) {
        jedis.close();
    }
}
</code></pre>
<h2><a id="%E4%B8%89%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>三、数据库连接使用规范</h2>
<ul>
<li>统一使用语法糖，防止忘记关闭数据库 session</li>
<li>在使用<code>HepDBSourceUtils.getSqlSessionForAutoCommit(targetConfig)</code>，必须按照下方语法糖示例获取连接</li>
</ul>
<p><strong>语法糖示例</strong></p>
<pre class="line-numbers"><code class="language-java">try (SqlSession targetSession = HepDBSourceUtils.getSqlSessionForAutoCommit(targetConfig)) {
    // TODO doSomething
} catch (Exception e) {
    LOG.error(e.getMessage(), e);
}
</code></pre>
<h2><a id="%E5%9B%9B%E3%80%81%E6%97%A5%E5%BF%97%E8%A7%84%E8%8C%83" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>四、日志规范</h2>
<ul>
<li>应用中不可直接使用日志系统(Log4j、Logback)中的 API，而应依赖使用日志框架SLF4J 中的 API，使用 门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</li>
</ul>
<p><strong>日志引入示例</strong></p>
<pre class="line-numbers"><code class="language-java">import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

private static final Logger logger = LoggerFactory.getLogger(Abc.class);
</code></pre>
<p><strong>日志快速定义快捷键</strong></p>
<ul>
<li>在IDEA中添加实施模板，操作步骤如下：</li>
</ul>
<p>设置 -&gt; 编辑器 -&gt; 实时模板 -&gt; Java -&gt; +</p>
<table>
<thead>
<tr>
<th>标题</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>缩写（快捷键）</td>
<td>logg</td>
</tr>
<tr>
<td>描述</td>
<td>日志快速定义</td>
</tr>
<tr>
<td>模板文本</td>
<td>private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger($CLASS_NAME$.class);</td>
</tr>
<tr>
<td>编辑变量-&gt;变量名称</td>
<td>CLASS_NAME</td>
</tr>
<tr>
<td>编辑变量-&gt;表达式</td>
<td>className()</td>
</tr>
</tbody>
</table>
<ul>
<li>对 trace/debug/info 级别的日志输出， 必须使用条件输出形式或者使用占位符的方式。</li>
</ul>
<p><strong>日志输出示例</strong></p>
<pre class="line-numbers"><code class="language-java">// 反例，如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象， 会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。
LOG.debug(&quot;Processing trade with id: &quot; + id + &quot; symbol: &quot; + symbol);
                        
// 正例1，使用条件输出
if (LOG.isDebugEnabled()) {
    LOG.debug(&quot;Processing trade with id: &quot; + id + &quot; symbol: &quot; + symbol);
}
                        
// 正例2，使用占位符
LOG.debug(&quot;Processing trade with id: {} symbol : {} &quot;, id, symbol);
</code></pre>
<h2><a id="%E4%BA%94%E3%80%81%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86%E8%A7%84%E8%8C%83" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>五、集合处理规范</h2>
<ul>
<li>
<p>关于 hashCode 和 equals 的处理，遵循如下规则：</p>
<p>1） 只要重写 equals ，就必须重写 hashCode 。</p>
<p>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法。</p>
<p>3） 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals 。</p>
</li>
<li>
<p>不要在 foreach 循环里进行元素的 remove / add 操作。 remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。</p>
</li>
</ul>
<pre class="line-numbers"><code class="language-java">// 反例，以下代码的执行结果肯定会出乎大家的意料，那么试一下把&quot;1&quot;换成&quot;2&quot;，(java.util.ConcurrentModificationException)
List&lt;String&gt; a = new ArrayList&lt;String&gt;();
a.add(&quot;1&quot;);
a.add(&quot;2&quot;);
for (String temp : a) {
    if(&quot;1&quot;.equals(temp)){
        a.remove(temp);
    }
}

// 正例
Iterator&lt;String&gt; it = a.iterator();
while(it.hasNext()){
    String temp = it.next();
    if(删除元素的条件){
        it.remove();
    }
}
</code></pre>
<ul>
<li>集合初始化时，尽量指定集合初始值大小。ArrayList 尽量使用 ArrayList(int initialCapacity) 初始化。</li>
<li>使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。 keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效 率更高。 如果是 JDK8，使用 Map.foreach 方法。</li>
</ul>
<p><strong>map遍历示例</strong></p>
<pre class="line-numbers"><code class="language-java">Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
map.put(&quot;1&quot;, &quot;@@&quot;);
map.put(&quot;2&quot;, &quot;##&quot;);

/**
 * JDK8推荐使用
 */
map.forEach((K, V) -&gt; {
    System.out.println(&quot;Key : &quot; + K);
    System.out.println(&quot;Value : &quot; + V);
});

/**
 * foreach推荐使用
 */
for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) {
    System.out.println(&quot;Key : &quot; + entry.getKey());
    System.out.println(&quot;Value : &quot; + entry.getValue());
}

/**
 * 不推荐使用
 */
for (String key : map.keySet()) {
    System.out.println(&quot;Key : &quot; + key);
    System.out.println(&quot;Value : &quot; + map.get(key));
}
</code></pre>
<h2><a id="%E5%85%AD%E3%80%81%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>六、注释规范</h2>
<ul>
<li>类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用 //xxx 方式。</li>
<li>所有的抽象方法(包括接口中的方法)必须要用 Javadoc 注释、除了返回值、参数、 异常说明外，还必须指出该方法做什么事情，实现什么功能。对子类的实现要求，或者调用注意事项，请一并说明。</li>
<li>方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐。</li>
<li>所有的枚举类型字段必须要有注释，说明每个数据项的用途。</li>
<li>代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑 等的修改。</li>
<li>注释掉的代码尽量要配合说明，而不是简单的注释掉。代码被注释掉有两种可能性:
<ul>
<li>后续会恢复此段代码逻辑。</li>
<li>永久不用。前者如果没 有备注信息，难以知晓注释动机。后者建议直接删掉(代码仓库保存了历史代码)。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx 重启]]></title>
    <link href="https://xixiang.tech/16861024310839.html"/>
    <updated>2023-06-07T09:47:11+08:00</updated>
    <id>https://xixiang.tech/16861024310839.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL的事务隔离级别]]></title>
    <link href="https://xixiang.tech/16859363169263.html"/>
    <updated>2023-06-05T11:38:36+08:00</updated>
    <id>https://xixiang.tech/16859363169263.html</id>
    <content type="html"><![CDATA[
<h2><a id="mysql%E6%8F%90%E4%BE%9B%E4%BA%86%E5%9B%9B%E4%B8%AA%E6%A0%87%E5%87%86%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>MySQL 提供了四个标准的事务隔离级别</h2>
<p>事务隔离级别是指控制并发事务之间相互影响的机制。MySQL 提供了四个标准的事务隔离级别，每个级别具有不同的特性和影响：</p>
<ol>
<li>READ UNCOMMITTED（读取未提交数据）：最低的隔离级别，允许一个事务读取其他事务未提交的数据。它可能导致脏读（Dirty Read），即读取到了其他事务未完成的数据。</li>
<li>READ COMMITTED（读取已提交数据）：允许一个事务只读取其他已经提交的事务所做的更改。它避免了脏读，但仍然可能遇到不可重复读（Non-Repeatable Read）和幻读（Phantom Read）的问题。</li>
<li>REPEATABLE READ（可重复读）：保证在同一个事务中多次读取同一行数据时，结果保持一致。它避免了不可重复读，但仍然可能遇到幻读的问题。MySQL 默认的隔离级别就是 REPEATABLE READ。</li>
<li>SERIALIZABLE（串行化）：最高的隔离级别，确保每个事务之间完全隔离，串行执行。它避免了脏读、不可重复读和幻读的问题，但也对并发性能有较大影响，并发度较低。</li>
</ol>
<h3><a id="%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E4%B8%AD%E5%AD%98%E5%9C%A8%E4%BB%A5%E4%B8%8B4%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>数据库并发控制中存在以下4个常见的问题：</h3>
<h4><a id="%E8%84%8F%E8%AF%BB%EF%BC%88dirty-read%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>脏读（Dirty Read）</h4>
<p>脏读（Dirty Read）是指一个事务读取到了另一个事务尚未提交的数据，当后者最终回滚时，前者等于是读取到了无效的数据。</p>
<p>具体来说，脏读的情况过程如下：</p>
<ol>
<li>事务A开始一个操作，并对一些数据进行了修改。</li>
<li>在此期间，<strong>事务B读取了事务A尚未提交的数据</strong>。</li>
<li>之后，<strong>事务A回滚了之前的修改操作</strong>，导致事务B读取到了未提交无效的数据。</li>
</ol>
<h4><a id="%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%EF%BC%88non-repeatable-read%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>不可重复读（Non-Repeatable Read）</h4>
<p>不可重复读（Non-Repeatable Read）是指一个事务在同一个查询中多次读取相同的数据，但由于其他事务并发地修改和提交，导致两次读取之间<strong>数据发生了变化</strong>。</p>
<p>具体来说，不可重复读的情况过程如下：</p>
<ol>
<li>事务A开始一个查询，并获得了一个读取锁来保护查询的数据范围。</li>
<li>在此期间，事务B对<strong>查询范围内的数据进行了修改</strong>并提交。</li>
<li>事务A再次执行相同的查询，但发现在第二次查询中<strong>数据已经发生了变化</strong>，与第一次查询的结果不一致。</li>
</ol>
<h4><a id="%E5%B9%BB%E8%AF%BB%EF%BC%88phantom-read%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>幻读（Phantom Read）</h4>
<p>幻读（Phantom Read）是指在同一个事务中执行相同的查询，但在第二次查询时发现出现了<strong>新增或删除的数据行</strong>。</p>
<p>幻读通常发生在并发事务环境中，其中一个事务中在多次执行相同的查询语句的过程中，另一个事务在此期间进行了插入、删除或更新操作，导致第二次查询返回了不同的数据行，产生了&quot;幻觉&quot;般的新增或删除的数据。</p>
<p>具体来说，幻读的情况过程如下：</p>
<ol>
<li>事务A开始一个查询，并获得了一个读取锁来保护查询的数据范围。</li>
<li>在此期间，事务B<strong>插入了一行新数据</strong>，符合事务A查询的条件。</li>
<li>事务A再次执行相同的查询，但发现在第二次查询<strong>结果中新增了一行数据</strong>，这条数据在第一次查询时并不存在这个数据。</li>
</ol>
<h4><a id="%E4%B8%A2%E5%A4%B1%E6%9B%B4%E6%96%B0%EF%BC%88lost-update%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>丢失更新（Lost Update）</h4>
<p>丢失更新（Lost Update）是指两个事务同时读取相同的数据，并对其进行修改，但只有一个事务的修改能够成功提交，另一个事务的修改被覆盖，导致数据丢失。</p>
<p>具体来说，丢失更新的情况如下：</p>
<ol>
<li>事务A和事务B同时读取同一行数据。</li>
<li>事务A修改了数据并提交事务。</li>
<li>紧接着，事务B也对同一行数据进行了修改，并尝试提交事务。</li>
<li>由于事务A已经修改了数据并提交，事务B的修改操作会覆盖事务A的修改，导致事务A的修改丢失。</li>
</ol>
<h3><a id="%E4%BA%8B%E7%89%A9%E9%9A%94%E7%A6%BB%E7%9A%84%E4%BB%8B%E7%BB%8D" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>事物隔离的介绍</h3>
<h4><a id="read-uncommitted%EF%BC%88%E8%AF%BB%E5%8F%96%E6%9C%AA%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>READ UNCOMMITTED（读取未提交数据）</h4>
<p>READ UNCOMMITTED（读取未提交数据）是最低级别的事务隔离级别，也被称为脏读隔离级别。在READ UNCOMMITTED级别下，一个事务可以读取到其他事务尚未提交的数据，可能读取到不一致或无效的数据。</p>
<p>READ UNCOMMITTED隔离级别具有以下特点和适用场景：</p>
<ol>
<li>数据不一致性：READ UNCOMMITTED级别允许事务读取到其他事务尚未提交的数据，这可能导致读取到不一致或无效的数据。因为其他事务可以对数据进行修改，而读取事务可能读取到已经被修改但尚未提交的数据，从而产生不一致性。</li>
<li>高并发性和性能：由于READ UNCOMMITTED级别允许事务读取未提交的数据，因此它提供了最高的并发性和性能。事务不需要等待其他事务的提交，可以立即读取到最新的未提交数据。这对于需要高并发读取操作的场景可能是有用的。</li>
</ol>
<p>适用场景：READ UNCOMMITTED级别适用于对数据一致性要求较低的场景。例如，在某些报表查询或临时数据处理任务中，可以使用READ UNCOMMITTED级别来获得更高的性能，而数据的准确性和一致性要求相对较低。</p>
<p>可能出现的问题：</p>
<ol>
<li>脏读问题：因为READ UNCOMMITTED级别允许读取未提交的数据，可能导致脏读问题。如果一个事务读取到了其他事务尚未提交的数据，而该数据在后续被回滚或修改，读取事务就读取到了无效或错误的数据。</li>
<li>数据冲突和不可重复读问题：由于事务可以读取到其他事务尚未提交的数据，可能会遇到数据冲突和不可重复读的问题。如果一个事务在读取数据后，其他事务对相同的数据进行修改并提交，那么之后的读取操作可能会返回不同的结果，导致不可重复读问题。</li>
</ol>
<p>需要注意的是，由于READ UNCOMMITTED级别存在严重的数据一致性问题，一般情况下不建议在生产环境中使用。它主要用于某些特定的临时性任务或特殊要求的数据处理场景，需要在确保数据一致性的情况下谨慎使用。大多数应用程序通常选择使用较高级别的隔离级别，如READ COMMITTED或REPEATABLE READ，以获得更好的数据一致性保证。</p>
<h4><a id="read-committed%EF%BC%88%E8%AF%BB%E5%8F%96%E5%B7%B2%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>READ COMMITTED（读取已提交数据）</h4>
<p>READ COMMITTED（读取已提交数据）是一种较为常见的事务隔离级别，它提供了一定程度的数据一致性和并发控制。在READ COMMITTED级别下，一个事务只能读取到已经提交的数据，不会读取到其他事务尚未提交的数据。</p>
<p>READ COMMITTED隔离级别具有以下特点和适用场景：</p>
<ol>
<li>数据一致性：READ COMMITTED级别保证了事务只能读取到已经提交的数据，避免了脏读问题。这意味着事务读取到的数据是其他事务已经确认为有效的数据，具有一定的数据一致性。</li>
<li>并发性和性能：相比较较高级别的隔离级别，如REPEATABLE READ或SERIALIZABLE，READ COMMITTED级别具有更高的并发性和性能。它允许多个事务同时进行读取操作，不会互相阻塞。这对于并发访问频繁的场景非常有用。</li>
<li>数据冲突和不可重复读问题：尽管READ COMMITTED级别避免了脏读问题，但它仍然可能出现数据冲突和不可重复读的问题。如果一个事务在读取数据后，其他事务对相同的数据进行了修改并提交，那么之后的读取操作可能会返回不同的结果，导致不可重复读问题。</li>
</ol>
<p>适用场景：READ COMMITTED级别适用于大多数应用程序的常规操作，对数据一致性有一定要求的场景。它提供了较好的并发性和性能，同时避免了脏读问题，适用于多用户、高并发的业务环境。</p>
<p>需要注意的是，READ COMMITTED级别仍然可能导致不可重复读的问题，因为在同一个事务中多次读取同一行数据时，其他事务可能会对该数据进行修改。如果应用程序对数据的准确性和一致性要求较高，可能需要考虑使用更高的隔离级别，如REPEATABLE READ或SERIALIZABLE，以提供更严格的数据一致性保证。</p>
<p>总的来说，READ COMMITTED隔离级别适用于大多数应用程序，提供了一定的数据一致性和较高的并发性能。然而，需要在具体的应用场景中综合考虑数据的一致性需求和并发访问的特点，选择适当的隔离级别来确保数据的正确性和应用程序的性能。</p>
<h4><a id="repeatable-read%EF%BC%88%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>REPEATABLE READ（可重复读）</h4>
<p>REPEATABLE READ（可重复读）是一种中等级别的事务隔离级别，它提供了更高的数据一致性和隔离性。在REPEATABLE READ级别下，一个事务在开始时读取的数据集将保持不变，即使其他事务对同一数据进行了修改和提交。</p>
<p>REPEATABLE READ隔离级别具有以下特点和适用场景：</p>
<ol>
<li>数据一致性：REPEATABLE READ级别保证在一个事务中读取的数据集不会发生变化。这意味着事务内部多次读取同一数据时，将得到一致的结果，不受其他并发事务的影响。这可以提供较高的数据一致性，适用于对数据准确性要求较高的场景。</li>
<li>隔离性：REPEATABLE READ级别提供了较高的隔离性，确保一个事务不会读取到其他事务尚未提交的数据。这避免了脏读和读取未提交数据的问题，确保事务读取到的数据是已经提交并具有一定一致性的数据。</li>
<li>并发性和性能：相比较较高级别的隔离级别，如SERIALIZABLE，REPEATABLE READ级别具有更高的并发性和性能。它允许并发事务进行读取操作，不会被其他事务的修改操作阻塞。这对于多用户、高并发的业务场景非常有用。</li>
<li>可能出现的问题：尽管REPEATABLE READ级别提供了较高的数据一致性和隔离性，但仍可能出现幻读问题。幻读指的是在同一事务中多次查询时，由于其他事务插入或删除了符合查询条件的数据，导致结果集发生变化的现象。这是因为REPEATABLE READ级别只保证了已经存在的数据不会发生变化，但不保证新插入的数据或被删除的数据在同一事务内不可见。</li>
</ol>
<p>适用场景：REPEATABLE READ隔离级别适用于对数据一致性要求较高的场景，例如需要确保事务内部读取到的数据集保持不变，而不受其他并发事务的干扰。适用于对数据一致性要求高、并发访问较多的业务场景，如订单处理、库存管理等。</p>
<p>需要注意的是，REPEATABLE READ级别仍然可能导致幻读问题。如果应用程序对幻读问题特别敏感，可以考虑使用更高的隔离级别，如SERIALIZABLE。然而，更高的隔离级别可能会带来性能的降低，需要综合考虑数据一致性和并发性能之间的权衡。在选择REPEATABLE READ级别时，应该仔细评估业务需求和系统性能，并确保通过其他手段（如锁机制或业务逻辑控制）来处理可能的幻读问题。</p>
<p>此外，使用REPEATABLE READ级别时，应注意事务的持续时间。由于REPEATABLE READ级别会在整个事务期间锁定读取的数据，长时间持有锁可能会影响并发性能和系统的吞吐量。因此，对于较长的事务，建议尽量缩小事务范围，减少锁的持有时间，以提高系统的并发性能。</p>
<p>总之，REPEATABLE READ隔离级别适用于对数据一致性要求较高、并发访问较多的业务场景。它提供了较高的数据一致性和隔离性，并具备较好的并发性能。然而，应该注意幻读问题的存在，并根据具体业务需求和系统特点进行评估和权衡，选择适当的事务隔离级别。</p>
<h4><a id="serializable%EF%BC%88%E4%B8%B2%E8%A1%8C%E5%8C%96%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>SERIALIZABLE（串行化）</h4>
<p>SERIALIZABLE（串行化）是最高级别的事务隔离级别，它提供了最严格的数据一致性和隔离性。在SERIALIZABLE级别下，事务按照串行的方式执行，确保事务之间互不干扰，避免了各种并发性问题。</p>
<p>SERIALIZABLE隔离级别具有以下特点和适用场景：</p>
<ol>
<li>数据一致性：SERIALIZABLE级别提供了最高的数据一致性，确保事务读取的数据是从事务开始时的一致状态。在一个事务中，后续读取操作将读取到相同的数据，即使其他事务对数据进行了修改和提交。</li>
<li>高隔离性：SERIALIZABLE级别提供了最高的隔离性，确保事务之间相互隔离，彼此不会产生任何干扰。这意味着并发事务之间无法读取或修改彼此的数据，从而避免了脏读、不可重复读和幻读等问题。</li>
</ol>
<p>适用场景：SERIALIZABLE级别适用于对数据一致性要求极高的场景，特别是在高并发写入和读取的情况下。它适用于对数据准确性要求非常严格的业务场景，如金融交易、银行系统、电子商务等。</p>
<p>可能出现的问题：</p>
<ol>
<li>并发性能降低：由于SERIALIZABLE级别保证了最高的数据一致性和隔离性，事务需要按照串行方式执行，这可能导致并发性能降低。因为事务需要等待其他事务完成后才能继续执行，可能会引起较高的锁竞争和事务等待。</li>
<li>死锁：由于SERIALIZABLE级别对事务之间的并发操作进行严格控制，可能导致死锁的发生。当多个事务相互等待对方释放锁资源时，可能会形成死锁，导致事务无法继续执行。</li>
</ol>
<p>需要注意的是，由于SERIALIZABLE级别的严格性和性能影响，一般情况下只在必要时才使用。大多数应用程序可以通过选择适当的隔离级别来平衡数据一致性和并发性能。如果应用程序对数据一致性的要求非常高，同时并发访问相对较少，才考虑使用SERIALIZABLE级别。否则，通常可以选择较低级别的隔离级别，如REPEATABLE READ或READ COMMITTED。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[根据提供的上下文无关文法和语法制导翻译，我们可以回答以下问题：]]></title>
    <link href="https://xixiang.tech/16846438729548.html"/>
    <updated>2023-05-21T12:37:52+08:00</updated>
    <id>https://xixiang.tech/16846438729548.html</id>
    <content type="html"><![CDATA[
<p>(1) 句子 id(id+id(id)) 的分析树：</p>
<pre class="line-numbers"><code class="language-plain_text">        V
     /     \
   id      E
     |     / \
    id   E   V
        /   / \
       E   id  E
       |       |
      id      V
             |
            id
</code></pre>
<p>(2) 若语义变量 var_no、arr_no 和 exp_no 的初值均为 1，对句子 id(id+id(id)) 分析完成后它们各自的值：</p>
<p>在分析过程中，每当遇到对应的语义动作，就会执行相应的操作。根据提供的语法制导翻译，我们可以计算出如下值：</p>
<ul>
<li>var_no = 1 + 1 = 2</li>
<li>arr_no = 1</li>
<li>exp_no = 1 + 1 + 1 = 3</li>
</ul>
<p>所以，完成分析后，var_no 的值为 2，arr_no 的值为 1，exp_no 的值为 3。</p>
<p>(3) 给出识别该文法活前缀的 DFA：</p>
<pre class="line-numbers"><code class="language-plain_text">      +----+
      |    |
      |    V
+-----|----|----+
|     |    |    |
id    (    +    id
|     |    |    |
+-----|----|----+
      |    |
      +----+
</code></pre>
<p>上述 DFA 的状态表示当前识别到的活前缀。初始状态为左边的起始符号 &quot;V&quot;，然后根据输入符号进行状态转换。状态之间的连线上标有对应的输入符号。箭头指示状态转移。从初始状态开始，根据输入符号 id 进行状态转移，然后根据输入符号 ( 进行状态转移，最后根据输入符号 + 进行状态转移。这个 DFA 可以识别文法的活前缀。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 分布式锁]]></title>
    <link href="https://xixiang.tech/16811178433683.html"/>
    <updated>2023-04-10T17:10:43+08:00</updated>
    <id>https://xixiang.tech/16811178433683.html</id>
    <content type="html"><![CDATA[
<p><a href="https://github.com/redisson/redisson/wiki">Redisson Wiki</a></p>
<h2><a id="%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>分布式锁的基本原理</h2>
<p>在现实生活中我们使用最长见的场景公共洗手间，当公共洗手间没有一把门锁，那么你进去的时候可能已经有人在啦，也可能你正在里面别人进来啦，是不是很尴尬。所以在洗手间门上安装一个锁，人进入洗手间后第一件事先把门锁了。后面的人想进来不好意思门锁着呢，里面已经有人拉。<br />
我们一起组队上厕所（分布式系统），共同使用一个公共洗手间（公共资源），先到了就上锁（获得锁）、解决生理（执行业务）、开锁（删除锁）、走人（结束）、下一位。<br />
与现实生活中不太相同的点，代码系统可能会出现一些不符合预期的点，比如代码异常、停机维护、宕机等问题。系统中就要引入一些额外的逻辑。</p>
<h2><a id="%E8%87%AA%E5%8A%A8%E8%BF%87%E6%9C%9F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>自动过期</h2>
<p>当执行业务时，代码异常或者程序宕机，没有执行删除锁逻辑，这就造成了死锁。<br />
设置锁的自动过期，即使没有删除，到时间也会自动删除</p>
<h2><a id="%E5%8E%9F%E5%AD%90%E6%80%A7%E6%93%8D%E4%BD%9C" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>原子性操作</h2>
<p>获得锁后，去设置过期时间的时候，宕机。又死锁了。<br />
redis支持使用 setnx ex 命令，设置过期时间和占位必须是原子的。</p>
<h2><a id="%E5%88%A0%E9%99%A4%E9%94%81%E5%88%A0%E9%99%A4%E8%87%AA%E5%B7%B1%E7%9A%84%E9%94%81" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>删除锁-删除自己的锁</h2>
<p>如果由于业务时间很长，锁自己过期了，我们直接删除，有可能把别人正在持有的锁删除了。<br />
占锁的时候，值指定为uuid，每个人匹配是自己的锁才删除。</p>
<h2><a id="" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a></h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步教您创建 ChatGPT 账户]]></title>
    <link href="https://xixiang.tech/16799040403171.html"/>
    <updated>2023-03-27T16:00:40+08:00</updated>
    <id>https://xixiang.tech/16799040403171.html</id>
    <content type="html"><![CDATA[
<h2><a id="1%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1. 准备工作</h2>
<h3><a id="1-1%E5%88%9B%E5%BB%BA%E7%9F%AD%E4%BF%A1%E6%8E%A5%E6%94%B6%E5%B9%B3%E5%8F%B0%E8%B4%A6%E6%88%B7%EF%BC%8C%E6%8E%A5%E5%8F%97-chatgpt%E8%B4%A6%E5%8F%B7%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.1 创建短信接收平台账户，接受ChatGPT账号短信验证</h3>
<p>平台地址<a href="https://sms-activate.org/?ref=5361921">sms-activate短信平台</a><br />
目前印度尼西亚的最便宜，可以使用支付宝（最低2美元）和银行卡支付下UnionPay(最低1美元)</p>
<h4><a id="1-1-1%E9%80%89%E6%8B%A9%E6%94%AF%E4%BB%98%E6%96%B9%E5%BC%8F%E9%93%B6%E8%A1%8C%E5%8D%A1%E6%94%AF%E4%BB%98-unionpay" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.1.1 选择支付方式-&gt;银行卡支付-&gt;UnionPay</h4>
<p><img src="media/16799040403171/16799045482018.jpg" alt="" style="width:920px;" /></p>
<h4><a id="1-1-2%E9%80%89%E6%8B%A9%E6%94%AF%E4%BB%98%E6%96%B9%E5%BC%8F%E6%94%AF%E4%BB%98%E5%AE%9D" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.1.2 选择支付方式-&gt;支付宝</h4>
<p><img src="media/16799040403171/16799045774784.jpg" alt="" style="width:920px;" /></p>
<h4><a id="1-1-3%E9%80%89%E6%8B%A9%E6%BF%80%E6%B4%BB-openai%E6%9C%8D%E5%8A%A1%E9%80%89%E6%8B%A9%E4%BC%98%E6%83%A0%E7%9A%84%E5%9B%BD%E5%AE%B6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.1.3 选择激活-&gt;openai服务-&gt;选择优惠的国家</h4>
<p><img src="media/16799040403171/16799052091779.jpg" alt="" style="width:920px;" /></p>
<h3><a id="1-2%E8%B4%AD%E4%B9%B0-vps%EF%BC%8C%E5%85%A8%E7%BD%91%E6%AF%94%E8%BE%83%E5%8F%B0%E6%B9%BE%E8%B6%85%E4%BD%8E%E4%BB%B7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.2 购买VPS，全网比较台湾超低价</h3>
<p>平台地址<a href="https://my.yecaoyun.com/aff.php?aff=2510">VPS</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HYBRIS HAC 禁用初始化以及控制系统更新]]></title>
    <link href="https://xixiang.tech/16786989126665.html"/>
    <updated>2023-03-13T17:15:12+08:00</updated>
    <id>https://xixiang.tech/16786989126665.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>hybris 的 admingroup 组中的所有用户，均具备操作 HAC 的初始化和更新功能的权限。<br />
然而，一旦系统上线，运维工作人员可能会继续使用该组的成员账户。<br />
为了防止这些账户误操作导致数据库初始化或更新，我们需要一些额外的控制措施来限制它们的访问</p>
</blockquote>
<h2><a id="%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>文件结构</h2>
<pre class="line-numbers"><code class="language-plain_text"># 增加hac模块
xixiangbase
├── hac
│       └──src/de/hybris/platform/hac/controller/InitUpdatePlatformController.java
│       └──resources
│               └──jsp/init.jsp
│               └──static
│                       └──css/init.css
│                       └──js/init.js
├── extensioninfo.xml
├── project.properties
├── resources
│       └──hac-tab-config.json
├── hmc
├── lib
├── src
</code></pre>
<h2><a id="%E6%96%B0%E5%A2%9E%E9%85%8D%E7%BD%AE%E9%A1%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>新增配置项</h2>
<pre class="line-numbers"><code class="language-plain_text"># project.properties

# true表示禁用，false表示开放
hac.initialization.disable=true
</code></pre>
<h2><a id="%E6%89%A9%E5%B1%95%E9%85%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>扩展配置添加</h2>
<pre class="line-numbers"><code class="language-XML">&lt;!-- extensioninfo.xml --&gt;

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;extensioninfo xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:noNamespaceSchemaLocation=&quot;extensioninfo.xsd&quot;&gt;
  &lt;extension abstractclassprefix=&quot;Generated&quot; classprefix=&quot;Xixiangbase&quot; managername=&quot;XixiangbaseManager&quot; managersuperclass=&quot;de.hybris.platform.jalo.extension.Extension&quot; name=&quot;xixiangbase&quot; usemaven=&quot;false&quot;&gt;
    &lt;requires-extension name=&quot;hmc&quot; /&gt;
    &lt;coremodule generated=&quot;true&quot; manager=&quot;com.xixiang.jalo.HepbaseManager&quot; packageroot=&quot;com.xixiang&quot;/&gt;
    &lt;hmcmodule extensionclassname=&quot;com.xixiang.core.hmc.HepCoreHMCExtension&quot;/&gt;
    &lt;!-- 增加 hac 配置 --&gt;
    &lt;meta key=&quot;hac-module&quot; value=&quot;true&quot;/&gt;
  &lt;/extension&gt;
&lt;/extensioninfo&gt;
</code></pre>
<h2><a id="%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9B%B4%E6%96%B0%E6%8E%A5%E5%8F%A3%E8%A6%86%E7%9B%96" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>初始化更新接口覆盖</h2>
<pre class="line-numbers"><code class="language-Java">package de.hybris.platform.hac.controller;

import de.hybris.platform.core.Registry;
import de.hybris.platform.core.Tenant;
import de.hybris.platform.core.model.security.PrincipalGroupModel;
import de.hybris.platform.core.model.user.UserModel;
import de.hybris.platform.hac.data.dto.BeautifulInitializationData;
import de.hybris.platform.hac.data.dto.BeautifulInitializationData.InitMethod;
import de.hybris.platform.hac.facade.DatabaseFacade;
import de.hybris.platform.hac.facade.InitUpdateFacade;
import de.hybris.platform.hac.facade.TenantsFacade;
import de.hybris.platform.servicelayer.user.UserService;
import de.hybris.platform.servicelayer.web.TenantAvailabilityService;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;


/**
 * @ClassName InitUpdatePlatformController
 * @Description 初始化更新接口覆盖
 * @Author xixiang
 * @Date 2023/3/1
 */
@Controller
@RequestMapping(&quot;/platform&quot;)
public class InitUpdatePlatformController {


    private static final Logger LOG = LoggerFactory.getLogger(InitUpdatePlatformController.class);

    private static final String HAC_PLATFORM_INITIALIZATION = &quot;HAC_PLATFORM_INITIALIZATION&quot;;
    private static final String HAC_PLATFORM_UPDATE = &quot;HAC_PLATFORM_UPDATE&quot;;
    @Autowired
    private TenantsFacade tenantsFacade;
    @Autowired
    private DatabaseFacade databaseInfoFacade;
    @Autowired
    private InitUpdateFacade initUpdateFacade;
    @Value(&quot;${hac.extlinks.wiki.initandupdate}&quot;)
    private String wikiInitAndUpdate;
    @Autowired
    private UserService userService;
    @Value(&quot;${hac.initialization.disable}&quot;)
    private boolean disable;

    @RequestMapping(value = &quot;/init&quot;, method = RequestMethod.GET)
    public String init(final Model model) {
        if (disable) {
            model.addAttribute(&quot;message&quot;, &quot;您好，初始化功能已禁用。&quot;);
            return &quot;init&quot;;
        } else if (verify(HAC_PLATFORM_INITIALIZATION, &quot;init&quot;)) {
            model.addAttribute(&quot;wikiInitAndUpdate&quot;, this.wikiInitAndUpdate);
            this.setUpModelForInitUpdate(model, InitMethod.INIT);
            return &quot;platform/init&quot;;
        } else {
            model.addAttribute(&quot;message&quot;, &quot;您好，您无初始化权限。&quot;);
            return &quot;init&quot;;
        }
    }

    @RequestMapping(value = &quot;/update&quot;)
    public String update(Model model) {
        if (verify(HAC_PLATFORM_UPDATE, &quot;update&quot;)) {
            model.addAttribute(&quot;wikiInitAndUpdate&quot;, this.wikiInitAndUpdate);
            this.setUpModelForInitUpdate(model, InitMethod.UPDATE);
            return &quot;platform/init&quot;;
        } else {
            model.addAttribute(&quot;message&quot;, &quot;您好，您无更新权限。&quot;);
            return &quot;init&quot;;
        }
    }

    @RequestMapping(value = &quot;/init/execute&quot;, method = RequestMethod.POST, produces = &quot;application/json;charset=UTF-8&quot;)
    public Map&lt;String, Object&gt; initExecuteWrap(@RequestBody BeautifulInitializationData data, Model model) {
        InitMethod initMethod = data.getInitMethod();
        boolean falg = false;
        if (InitMethod.UPDATE.equals(initMethod) &amp;&amp; verify(HAC_PLATFORM_UPDATE, &quot;update execute&quot;)) {
            falg = true;
        } else if (!disable &amp;&amp; InitMethod.INIT.equals(initMethod) &amp;&amp; verify(HAC_PLATFORM_INITIALIZATION, &quot;init execute&quot;)) {
            falg = true;
        }
        Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();
        result.put(&quot;success&quot;, Boolean.FALSE);
        result.put(&quot;log&quot;, &quot;Platform Init/Update Failed...&quot;);
        return falg ? this.initUpdateFacade.executeInitUpdate(data) : result;
    }


    private boolean verify(String groupId, String option) {
        Tenant tenant = Registry.getCurrentTenantNoFallback();
        TenantAvailabilityService availabilityService = TenantAvailabilityService.createDefault();
        UserModel user = userService.getCurrentUser();
        if (null == user) {
            // 没有用户登录，并且没有初始化过系统，说明首次执行，同意执行
            return null == tenant || !availabilityService.isTenantAvailable(tenant.getTenantID());
        }
        boolean flag = false;
        Set&lt;PrincipalGroupModel&gt; groupModels = user.getGroups();
        for (PrincipalGroupModel group : groupModels) {
            if (groupId.equalsIgnoreCase(group.getUid())) {
                flag = true;
                break;
            }
        }
        LOG.info(&quot;user {} {} verify {}...&quot;, user.getUid(), option, flag);
        return flag;
    }


    private void setUpModelForInitUpdate(Model model, BeautifulInitializationData.InitMethod initMethod) {
        model.addAttribute(this.databaseInfoFacade.getDatabaseInfoForInitUpdatePage());
        model.addAttribute(&quot;locked&quot;, this.initUpdateFacade.isLocked());
        model.addAttribute(&quot;unlockable&quot;, this.initUpdateFacade.isUnlockable());
        model.addAttribute(&quot;initialized&quot;, this.initUpdateFacade.isInitialized());
        model.addAttribute(&quot;type&quot;, initMethod.toString());
        model.addAttribute(&quot;title&quot;, this.capitalize(initMethod.toString()));
        model.addAttribute(&quot;masterTenant&quot;, this.tenantsFacade.isCurrentTenantMaster());
    }

    private String capitalize(String input) {
        return StringUtils.capitalize(input.toLowerCase());
    }

}
</code></pre>
<h2><a id="%E9%A1%B5%E9%9D%A2%E8%A6%86%E7%9B%96" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>页面覆盖</h2>
<pre class="line-numbers"><code class="language-jsp">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;
&lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %&gt;
&lt;% pageContext.setAttribute(&quot;newLineChar&quot;, &quot;\n&quot;); %&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;初始化&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h2 style=&quot;text-align: center; padding-top: 6em; height: 1.5em;&quot;&gt;${message}&lt;/h2&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2><a id="%E8%8F%9C%E5%8D%95%E8%A6%86%E7%9B%96" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>菜单覆盖</h2>
<pre class="line-numbers"><code class="language-json"># hac-tab-config.json
[
  {
    &quot;basePath&quot;: &quot;/platform&quot;,
    &quot;mainTabLabel&quot;: &quot;platform&quot;,
    &quot;subTabs&quot;: [
      {
        &quot;path&quot;: &quot;/tenants&quot;,
        &quot;label&quot;: &quot;tenants&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_TENANTS&quot;
        ],
        &quot;skipPrefix&quot;: true
      },
      {
        &quot;path&quot;: &quot;/config&quot;,
        &quot;label&quot;: &quot;configuration&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_CONFIGURATION&quot;,
          &quot;ROLE_HAC_PLATFORM_CONFIGURATION_LIMITED&quot;
        ],
        &quot;skipPrefix&quot;: false
      },
      {
        &quot;path&quot;: &quot;/system&quot;,
        &quot;label&quot;: &quot;system&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_SYSTEM&quot;
        ],
        &quot;skipPrefix&quot;: false
      },
      {
        &quot;path&quot;: &quot;/log4j&quot;,
        &quot;label&quot;: &quot;logging&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_LOGGING&quot;,
          &quot;ROLE_HAC_PLATFORM_LOGGING_LIMITED&quot;
        ],
        &quot;skipPrefix&quot;: false
      },
      {
        &quot;path&quot;: &quot;/extensions&quot;,
        &quot;label&quot;: &quot;extensions&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_EXTENSIONS&quot;
        ],
        &quot;skipPrefix&quot;: false
      },
      {
        &quot;path&quot;: &quot;/init&quot;,
        &quot;label&quot;: &quot;initialization&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_INITIALIZATION&quot;
        ],
        &quot;skipPrefix&quot;: false
      },
      {
        &quot;path&quot;: &quot;/update&quot;,
        &quot;label&quot;: &quot;update&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_UPDATE&quot;
        ],
        &quot;skipPrefix&quot;: false
      },
      {
        &quot;path&quot;: &quot;/dryrun&quot;,
        &quot;label&quot;: &quot;SQL scripts&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_SQLSCIPTS&quot;
        ],
        &quot;skipPrefix&quot;: false
      },
      {
        &quot;path&quot;: &quot;/license&quot;,
        &quot;label&quot;: &quot;license&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_LICENSE&quot;
        ],
        &quot;skipPrefix&quot;: false
      },
      {
        &quot;path&quot;: &quot;/support&quot;,
        &quot;label&quot;: &quot;support&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_SUPPORT&quot;
        ],
        &quot;skipPrefix&quot;: false
      },
      {
        &quot;path&quot;: &quot;/pkanalyzer&quot;,
        &quot;label&quot;: &quot;PK analyzer&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_PKANALYZER&quot;
        ],
        &quot;skipPrefix&quot;: false
      },
      {
        &quot;path&quot;: &quot;/jars&quot;,
        &quot;label&quot;: &quot;classpath analyzer&quot;,
        &quot;roles&quot;: [
          &quot;ROLE_HAC_PLATFORM_CLASSPATHANALYZER&quot;
        ],
        &quot;skipPrefix&quot;: false
      }
    ]
  }
]
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="https://xixiang.tech/16784601177043.html"/>
    <updated>2023-03-10T22:55:17+08:00</updated>
    <id>https://xixiang.tech/16784601177043.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[404页面]]></title>
    <link href="https://xixiang.tech/16784590857314.html"/>
    <updated>2023-03-10T22:38:05+08:00</updated>
    <id>https://xixiang.tech/16784590857314.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ShardingSphere5]]></title>
    <link href="https://xixiang.tech/16774110810352.html"/>
    <updated>2023-02-26T19:31:21+08:00</updated>
    <id>https://xixiang.tech/16774110810352.html</id>
    <content type="html"><![CDATA[
<hr />
<h1><a id="%E7%AC%AC01%E7%AB%A0%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第01章 高性能架构模式</h1>
<p>互联网业务兴起之后，海量用户加上海量数据的特点，单个数据库服务器已经难以满足业务需要，必须考虑数据库集群的方式来提升性能。高性能数据库集群的<code>第一种方式是“读写分离”</code>，<code>第二种方式是“数据库分片”</code>。</p>
<h2><a id="1%E3%80%81%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%9E%B6%E6%9E%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1、读写分离架构</h2>
<p>**读写分离原理：**读写分离的基本原理是将数据库读写操作分散到不同的节点上，下面是其基本架构图：</p>
<p><img src="assets/362d22168bf344687ec0c206aa115807.jpg" alt="img" /></p>
<p><strong>读写分离的基本实现：</strong></p>
<ul>
<li><code>主库负责处理事务性的增删改操作，从库负责处理查询操作</code>，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。</li>
<li>读写分离是<code>根据 SQL 语义的分析</code>，<code>将读操作和写操作分别路由至主库与从库</code>。</li>
<li>通过<code>一主多从</code>的配置方式，可以将查询请求均匀的分散到多个数据副本，能够进一步的提升系统的处理能力。</li>
<li>使用<code>多主多从</code>的方式，不但能够提升系统的吞吐量，还能够提升系统的可用性，可以达到在任何一个数据库宕机，甚至磁盘物理损坏的情况下仍然不影响系统的正常运行。</li>
</ul>
<p><strong>下图展示了根据业务需要，将用户表的写操作和读操路由到不同的数据库的方案：</strong></p>
<p><img src="assets/image-20220804223138651.png" alt="image-20220804223138651" /></p>
<p><strong>CAP 理论：</strong></p>
<p>CAP 定理（CAP theorem）又被称作布鲁尔定理（Brewer's theorem），是加州大学伯克利分校的计算机科学家埃里克·布鲁尔（Eric Brewer）在 2000 年的 ACM PODC 上提出的一个猜想。<code>对于设计分布式系统的架构师来说，CAP 是必须掌握的理论。</code></p>
<p>在一个<code>分布式系统中</code>，当涉及读写操作时，只能保证一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三者中的两个，另外一个必须被牺牲。</p>
<ul>
<li>C 一致性（Consistency）：对某个指定的客户端来说，读操作保证能够返回最新的写操作结果</li>
<li>A 可用性（Availability）：非故障的节点在合理的时间内返回合理的响应<code>（不是错误和超时的响应）</code></li>
<li>P 分区容忍性（Partition Tolerance）：当出现网络分区后<code>（可能是丢包，也可能是连接中断，还可能是拥塞）</code>，系统能够继续“履行职责”</li>
</ul>
<p><strong>CAP特点：</strong></p>
<ul>
<li>
<p>在实际设计过程中，每个系统不可能只处理一种数据，而是包含多种类型的数据，<code>有的数据必须选择 CP，有的数据必须选择 AP，分布式系统理论上不可能选择 CA 架构。</code></p>
<ul>
<li>CP：如下图所示，<code>为了保证一致性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 需要返回 Error，提示客户端 C“系统现在发生了错误”，</code>这种处理方式<code>违背了可用性</code>（Availability）的要求，因此 CAP 三者只能满足 CP。</li>
</ul>
<p><img src="assets/6e7d7bd54d7a4eb67918080863d354d7.png" alt="img" /></p>
<ul>
<li>AP：如下图所示，<code>为了保证可用性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 将当前自己拥有的数据 x 返回给客户端 C 了</code>，而实际上当前最新的数据已经是 y 了，这就<code>不满足一致性</code>（Consistency）的要求了，因此 CAP 三者只能满足 AP。注意：这里 N2 节点返回 x，虽然不是一个“正确”的结果，但是一个“合理”的结果，因为 x 是旧的数据，并不是一个错乱的值，只是不是最新的数据而已。</li>
</ul>
</li>
</ul>
<p><img src="assets/2ccafe41de9bd7f8dec4658f004310d6.png" alt="img" /></p>
<ul>
<li>
<p>CAP 理论中的 <code>C 在实践中是不可能完美实现的</code>，在数据复制的过程中，节点N1 和节点 N2 的数据并不一致（强一致性）。即使无法做到<code>强一致性</code>，但应用可以采用适合的方式达到<code>最终一致性</code>。具有如下特点：</p>
<ul>
<li>基本可用（Basically Available）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li>
<li>软状态（Soft State）：允许系统存在中间状态，而该中间状态不会影响系统整体可用性。这里的中间状态就是 CAP 理论中的数据不一致。</li>
<li><code>最终一致性（Eventual Consistency）：系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。</code></li>
</ul>
</li>
</ul>
<h2><a id="2%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%89%87%E6%9E%B6%E6%9E%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2、数据库分片架构</h2>
<p><strong>读写分离的问题：</strong></p>
<p>读写分离分散了数据库读写操作的压力，但没有分散存储压力，为了满足业务数据存储的需求，就需要<code>将存储分散到多台数据库服务器上</code>。</p>
<p><strong>数据分片：</strong></p>
<p>将存放在单一数据库中的数据分散地存放至多个数据库或表中，以达到提升性能瓶颈以及可用性的效果。 数据分片的有效手段是对关系型数据库进行<code>分库和分表</code>。数据分片的拆分方式又分为<code>垂直分片和水平分片</code>。</p>
<h3><a id="2-1%E3%80%81%E5%9E%82%E7%9B%B4%E5%88%86%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.1、垂直分片</h3>
<p><strong>垂直分库：</strong></p>
<p><code>按照业务拆分的方式称为垂直分片，又称为纵向拆分</code>，它的核心理念是专库专用。 在拆分之前，一个数据库由多个数据表构成，每个表对应着不同的业务。而拆分之后，则是按照业务将表进行归类，分布到不同的数据库中，从而将压力分散至不同的数据库。</p>
<p><img src="assets/71f41d46cc5c0405f4d4dc944b4350c9.jpg" alt="img" /></p>
<p>下图展示了根据业务需要，将用户表和订单表垂直分片到不同的数据库的方案：</p>
<p><img src="assets/image-20220804221855449.png" alt="image-20220804221855449" /></p>
<p>垂直拆分可以缓解数据量和访问量带来的问题，但无法根治。<code>如果垂直拆分之后，表中的数据量依然超过单节点所能承载的阈值，则需要水平分片来进一步处理。</code></p>
<p><strong>垂直分表：</strong></p>
<p><code>垂直分表适合将表中某些不常用的列，或者是占了大量空间的列拆分出去。</code></p>
<p>假设我们是一个婚恋网站，用户在筛选其他用户的时候，主要是用 age 和 sex 两个字段进行查询，而 nickname 和 description 两个字段主要用于展示，一般不会在业务查询中用到。description 本身又比较长，因此我们可以将这两个字段独立到另外一张表中，这样在查询 age 和 sex 时，就能带来一定的性能提升。</p>
<p>垂直分表引入的复杂性主要体现在表操作的数量要增加。例如，原来只要一次查询就可以获取 name、age、sex、nickname、description，现在需要两次查询，一次查询获取 name、age、sex，另外一次查询获取 nickname、description。</p>
<p><img src="assets/136bc2f01919edcb8271df6f7e71af40.jpg" alt="img" /></p>
<p><code>水平分表适合表行数特别大的表，水平分表属于水平分片</code>。</p>
<h3><a id="2-2%E3%80%81%E6%B0%B4%E5%B9%B3%E5%88%86%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.2、水平分片</h3>
<p><code>水平分片又称为横向拆分。</code> 相对于垂直分片，它不再将数据根据业务逻辑分类，而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中，每个分片仅包含数据的一部分。 例如：根据主键分片，偶数主键的记录放入 0 库（或表），奇数主键的记录放入 1 库（或表），如下图所示。</p>
<p><img src="assets/image-20220804222212087.png" alt="image-20220804222212087" /></p>
<p><code>单表进行切分后，是否将多个表分散在不同的数据库服务器中，可以根据实际的切分效果来确定。</code></p>
<ul>
<li>
<p>**水平分表：**单表切分为多表后，新的表即使在同一个数据库服务器中，也可能带来可观的性能提升，如果性能能够满足业务要求，可以不拆分到多台数据库服务器，毕竟业务分库也会引入很多复杂性；</p>
</li>
<li>
<p>**水平分库：**如果单表拆分为多表后，单台服务器依然无法满足性能要求，那就需要将多个表分散在不同的数据库服务器中。</p>
</li>
</ul>
<blockquote>
<p><strong>阿里巴巴Java开发手册：</strong></p>
<p>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</p>
<p>说明：如果预计三年后的数据量根本达不到这个级别，<code>请不要在创建表时就分库分表</code>。</p>
</blockquote>
<h2><a id="3%E3%80%81%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%92%8C%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E6%9E%B6%E6%9E%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3、读写分离和数据分片架构</h2>
<p>下图展现了将数据分片与读写分离一同使用时，应用程序与数据库集群之间的复杂拓扑关系。</p>
<p><img src="assets/image-20220804223321167.png" alt="image-20220804223321167" /></p>
<h2><a id="4%E3%80%81%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4、实现方式</h2>
<p>读写分离和数据分片具体的实现方式一般有两种：  <code>程序代码封装</code>和<code>中间件封装</code>。</p>
<h3><a id="4-1%E3%80%81%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E5%B0%81%E8%A3%85" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.1、程序代码封装</h3>
<p>程序代码封装指在代码中抽象一个<code>数据访问层（或中间层封装）</code>，实现读写操作分离和数据库服务器连接的管理。</p>
<p>**其基本架构是：**以读写分离为例</p>
<p><img src="assets/f8d538f9201e3ebee37dfdcd1922e9df.jpg" alt="img" /></p>
<h3><a id="4-2%E3%80%81%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B0%81%E8%A3%85" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.2、中间件封装</h3>
<p>中间件封装指的是<code>独立一套系统出来</code>，实现读写操作分离和数据库服务器连接的管理。对于业务服务器来说，访问中间件和访问数据库没有区别，在业务服务器看来，中间件就是一个数据库服务器。</p>
<p>**基本架构是：**以读写分离为例</p>
<p><img src="assets/2a2dba7f07581fd055d9cd5a3aa8388e.jpg" alt="img" /></p>
<h3><a id="4-3%E3%80%81%E5%B8%B8%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.3、常用解决方案</h3>
<p>Apache ShardingSphere（程序级别和中间件级别）</p>
<p>MyCat（数据库中间件）</p>
<h1><a id="%E7%AC%AC02%E7%AB%A0-shardingsphere" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第02章 ShardingSphere</h1>
<h2><a id="1%E3%80%81%E7%AE%80%E4%BB%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1、简介</h2>
<p>官网：<a href="https://shardingsphere.apache.org/index_zh.html">https://shardingsphere.apache.org/index_zh.html</a></p>
<p>文档：<a href="https://shardingsphere.apache.org/document/5.1.1/cn/overview/">https://shardingsphere.apache.org/document/5.1.1/cn/overview/</a></p>
<p>Apache ShardingSphere 由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。</p>
<h2><a id="2%E3%80%81shardingsphere-jdbc" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2、ShardingSphere-JDBC</h2>
<p><strong>程序代码封装</strong></p>
<p>定位为轻量级 Java 框架，<code>在 Java 的 JDBC 层提供的额外服务</code>。 它使用客户端直连数据库，<code>以 jar 包形式提供服务</code>，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p>
<p><img src="assets/image-20220804195402870.png" alt="image-20220804195402870" /></p>
<h2><a id="3%E3%80%81shardingsphere-proxy" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3、ShardingSphere-Proxy</h2>
<p><strong>中间件封装</strong></p>
<p>定位为透明化的<code>数据库代理端</code>，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前提供 MySQL 和 PostgreSQL版本，它可以使用任何兼容 MySQL/PostgreSQL 协议的访问客户端（如：MySQL Command Client, MySQL Workbench, Navicat 等）操作数据，对 DBA 更加友好。</p>
<p><img src="assets/image-20220804195432673.png" alt="image-20220804195432673" /></p>
<h1><a id="%E7%AC%AC03%E7%AB%A0-mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第03章 MySQL主从同步</h1>
<h2><a id="1%E3%80%81mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1、MySQL主从同步原理</h2>
<p><img src="assets/image-20220714133617856.png" alt="img" /></p>
<p><strong>基本原理：</strong></p>
<p>slave会从master读取binlog来进行数据同步</p>
<p><strong>具体步骤：</strong></p>
<ul>
<li><code>step1：</code>master将数据改变记录到<code>二进制日志（binary log）</code>中。</li>
<li><code>step2：</code> 当slave上执行 <code>start slave</code> 命令之后，slave会创建一个 <code>IO 线程</code>用来连接master，请求master中的binlog。</li>
<li><code>step3：</code>当slave连接master时，master会创建一个 <code>log dump 线程</code>，用于发送 binlog 的内容。在读取 binlog 的内容的操作中，会对主节点上的 binlog 加锁，当读取完成并发送给从服务器后解锁。</li>
<li><code>step4：</code>IO 线程接收主节点 binlog dump 进程发来的更新之后，保存到 <code>中继日志（relay log）</code> 中。</li>
<li><code>step5：</code>slave的<code>SQL线程</code>，读取relay log日志，并解析成具体操作，从而实现主从操作一致，最终数据一致。</li>
</ul>
<h2><a id="2%E3%80%81%E4%B8%80%E4%B8%BB%E5%A4%9A%E4%BB%8E%E9%85%8D%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2、一主多从配置</h2>
<p>服务器规划：使用<code>docker</code>方式创建，<code>主从服务器IP一致，端口号不一致</code></p>
<p><img src="assets/image-20220807183231101.png" alt="image-20220807183231101" /></p>
<ul>
<li>主服务器：容器名<code>atguigu-mysql-master</code>，端口<code>3306</code></li>
<li>从服务器：容器名<code>atguigu-mysql-slave1</code>，端口<code>3307</code></li>
<li>从服务器：容器名<code>atguigu-mysql-slave2</code>，端口<code>3308</code></li>
</ul>
<p>**注意：**如果此时防火墙是开启的，<code>则先关闭防火墙，并重启docker</code>，否则后续安装的MySQL无法启动</p>
<pre class="line-numbers"><code class="language-shell">#关闭docker
systemctl stop docker
#关闭防火墙
systemctl stop firewalld
#启动docker
systemctl start docker
</code></pre>
<h3><a id="2-1%E3%80%81%E5%87%86%E5%A4%87%E4%B8%BB%E6%9C%8D%E5%8A%A1%E5%99%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.1、准备主服务器</h3>
<ul>
<li><strong>step1：在docker中创建并启动MySQL主服务器：</strong><code>端口3306</code></li>
</ul>
<pre class="line-numbers"><code class="language-shell">docker run -d \
-p 3306:3306 \
-v /atguigu/mysql/master/conf:/etc/mysql/conf.d \
-v /atguigu/mysql/master/data:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=123456 \
--name atguigu-mysql-master \
mysql:8.0.29
</code></pre>
<ul>
<li><strong>step2：创建MySQL主服务器配置文件：</strong></li>
</ul>
<p>默认情况下MySQL的binlog日志是自动开启的，可以通过如下配置定义一些可选配置</p>
<pre class="line-numbers"><code class="language-shell">vim /atguigu/mysql/master/conf/my.cnf
</code></pre>
<p>配置如下内容</p>
<pre class="line-numbers"><code class="language-properties">[mysqld]
# 服务器唯一id，默认值1
server-id=1
# 设置日志格式，默认值ROW
binlog_format=STATEMENT
# 二进制日志名，默认binlog
# log-bin=binlog
# 设置需要复制的数据库，默认复制全部数据库
#binlog-do-db=mytestdb
# 设置不需要复制的数据库
#binlog-ignore-db=mysql
#binlog-ignore-db=infomation_schema
</code></pre>
<p>重启MySQL容器</p>
<pre class="line-numbers"><code class="language-shell">docker restart atguigu-mysql-master
</code></pre>
<p><code>binlog格式说明：</code></p>
<ul>
<li>binlog_format=STATEMENT：日志记录的是主机数据库的<code>写指令</code>，性能高，但是now()之类的函数以及获取系统参数的操作会出现主从数据不同步的问题。</li>
<li>binlog_format=ROW（默认）：日志记录的是主机数据库的<code>写后的数据</code>，批量操作时性能较差，解决now()或者  user()或者  @@hostname 等操作在主从机器上不一致的问题。</li>
<li>binlog_format=MIXED：是以上两种level的混合使用，有函数用ROW，没函数用STATEMENT，但是无法识别系统变量</li>
</ul>
<p><code>binlog-ignore-db和binlog-do-db的优先级问题：</code></p>
<p><img src="assets/0.08703112216569037.png" alt="img" /></p>
<ul>
<li><strong>step3：使用命令行登录MySQL主服务器：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-shell">#进入容器：env LANG=C.UTF-8 避免容器中显示中文乱码
docker exec -it atguigu-mysql-master env LANG=C.UTF-8 /bin/bash
#进入容器内的mysql命令行
mysql -uroot -p
#修改默认密码校验方式
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
</code></pre>
<ul>
<li><strong>step4：主机中创建slave用户：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-sql">-- 创建slave用户
CREATE USER 'atguigu_slave'@'%';
-- 设置密码
ALTER USER 'atguigu_slave'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
-- 授予复制权限
GRANT REPLICATION SLAVE ON *.* TO 'atguigu_slave'@'%';
-- 刷新权限
FLUSH PRIVILEGES;
</code></pre>
<ul>
<li><strong>step5：主机中查询master状态：</strong></li>
</ul>
<p>执行完此步骤后<code>不要再操作主服务器MYSQL</code>，防止主服务器状态值变化</p>
<pre class="line-numbers"><code class="language-sql">SHOW MASTER STATUS;
</code></pre>
<p>记下<code>File</code>和<code>Position</code>的值。执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化。</p>
<p><img src="assets/image-20220804191852164.png" alt="image-20220804191852164" /></p>
<h3><a id="2-2%E3%80%81%E5%87%86%E5%A4%87%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.2、准备从服务器</h3>
<p>可以配置多台从机slave1、slave2...，这里以配置slave1为例</p>
<ul>
<li><strong>step1：在docker中创建并启动MySQL从服务器：</strong><code>端口3307</code></li>
</ul>
<pre class="line-numbers"><code class="language-shell">docker run -d \
-p 3307:3306 \
-v /atguigu/mysql/slave1/conf:/etc/mysql/conf.d \
-v /atguigu/mysql/slave1/data:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=123456 \
--name atguigu-mysql-slave1 \
mysql:8.0.29
</code></pre>
<ul>
<li><strong>step2：创建MySQL从服务器配置文件：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-shell">vim /atguigu/mysql/slave1/conf/my.cnf
</code></pre>
<p>配置如下内容：</p>
<pre class="line-numbers"><code class="language-properties">[mysqld]
# 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id
server-id=2
# 中继日志名，默认xxxxxxxxxxxx-relay-bin
#relay-log=relay-bin
</code></pre>
<p>重启MySQL容器</p>
<pre class="line-numbers"><code class="language-shell">docker restart atguigu-mysql-slave1
</code></pre>
<ul>
<li><strong>step3：使用命令行登录MySQL从服务器：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-shell">#进入容器：
docker exec -it atguigu-mysql-slave1 env LANG=C.UTF-8 /bin/bash
#进入容器内的mysql命令行
mysql -uroot -p
#修改默认密码校验方式
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
</code></pre>
<ul>
<li><strong>step4：在从机上配置主从关系：</strong></li>
</ul>
<p>在<strong>从机</strong>上执行以下SQL操作</p>
<pre class="line-numbers"><code class="language-sql">CHANGE MASTER TO MASTER_HOST='192.168.100.201', 
MASTER_USER='atguigu_slave',MASTER_PASSWORD='123456', MASTER_PORT=3306,
MASTER_LOG_FILE='binlog.000003',MASTER_LOG_POS=1357; 
</code></pre>
<h3><a id="2-3%E3%80%81%E5%90%AF%E5%8A%A8%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.3、启动主从同步</h3>
<p>启动从机的复制功能，执行SQL：</p>
<pre class="line-numbers"><code class="language-sql">START SLAVE;
-- 查看状态（不需要分号）
SHOW SLAVE STATUS\G
</code></pre>
<p>**两个关键进程：**下面两个参数都是Yes，则说明主从配置成功！</p>
<p><img src="assets/image-20220715000533951.png" alt="img" /></p>
<h3><a id="2-4%E3%80%81%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.4、实现主从同步</h3>
<p>在主机中执行以下SQL，在从机中查看数据库、表和数据是否已经被同步</p>
<pre class="line-numbers"><code class="language-sql">CREATE DATABASE db_user;
USE db_user;
CREATE TABLE t_user (
 id BIGINT AUTO_INCREMENT,
 uname VARCHAR(30),
 PRIMARY KEY (id)
);
INSERT INTO t_user(uname) VALUES('zhang3');
INSERT INTO t_user(uname) VALUES(@@hostname);
</code></pre>
<h3><a id="2-5%E3%80%81%E5%81%9C%E6%AD%A2%E5%92%8C%E9%87%8D%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.5、停止和重置</h3>
<p>需要的时候，可以使用如下SQL语句</p>
<pre class="line-numbers"><code class="language-sql">-- 在从机上执行。功能说明：停止I/O 线程和SQL线程的操作。
stop slave; 

-- 在从机上执行。功能说明：用于删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件。
reset slave;

-- 在主机上执行。功能说明：删除所有的binglog日志文件，并将日志索引文件清空，重新开始所有新的日志文件。
-- 用于第一次进行搭建主从库时，进行主库binlog初始化工作；
reset master;
</code></pre>
<h3><a id="2-6%E3%80%81%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a><strong>2.6、常见问题</strong></h3>
<h4><a id="%E9%97%AE%E9%A2%981" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>问题1</h4>
<p>启动主从同步后，常见错误是<code>Slave_IO_Running： No 或者 Connecting</code> 的情况，此时查看下方的 <code>Last_IO_ERROR</code>错误日志，根据日志中显示的错误信息在网上搜索解决方案即可</p>
<p><img src="assets/image-20220714235426120.png" alt="img" /></p>
<p><strong>典型的错误例如：</strong><code>Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: 'Client requested master to start replication from position &gt; file size'</code></p>
<p><strong>解决方案：</strong></p>
<pre class="line-numbers"><code class="language-sql">-- 在从机停止slave
SLAVE STOP;

-- 在主机查看mater状态
SHOW MASTER STATUS;
-- 在主机刷新日志
FLUSH LOGS;
-- 再次在主机查看mater状态（会发现File和Position发生了变化）
SHOW MASTER STATUS;
-- 修改从机连接主机的SQL，并重新连接即可
</code></pre>
<h4><a id="%E9%97%AE%E9%A2%982" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>问题2</h4>
<p>启动docker容器后提示 <code>WARNING: IPv4 forwarding is disabled. Networking will not work.</code></p>
<p><img src="assets/image-20220715004850504.png" alt="img" /></p>
<p>此错误，虽然不影响主从同步的搭建，但是如果想从远程客户端通过以下方式连接docker中的MySQL则没法连接</p>
<pre class="line-numbers"><code class="language-shell">C:\Users\administrator&gt;mysql -h 192.168.100.201 -P 3306 -u root -p
</code></pre>
<p><strong>解决方案：</strong></p>
<pre class="line-numbers"><code class="language-shell">#修改配置文件：
vim /usr/lib/sysctl.d/00-system.conf
#追加
net.ipv4.ip_forward=1
#接着重启网络
systemctl restart network
</code></pre>
<h1><a id="%E7%AC%AC04%E7%AB%A0-shardingsphere-jdbc%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第04章 ShardingSphere-JDBC读写分离</h1>
<h2><a id="1%E3%80%81%E5%88%9B%E5%BB%BAspringboot%E7%A8%8B%E5%BA%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1、创建SpringBoot程序</h2>
<h3><a id="1-1%E3%80%81%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.1、创建项目</h3>
<p>项目类型：Spring Initializr</p>
<p>SpringBoot脚手架：<a href="http://start.aliyun.com">http://start.aliyun.com</a></p>
<p>项目名：sharding-jdbc-demo</p>
<p>SpringBoot版本：2.3.7.RELEASE</p>
<h3><a id="1-2%E3%80%81%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.2、添加依赖</h3>
<pre class="line-numbers"><code class="language-xml">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;
        &lt;artifactId&gt;shardingsphere-jdbc-core-spring-boot-starter&lt;/artifactId&gt;
        &lt;version&gt;5.1.1&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;scope&gt;runtime&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
        &lt;version&gt;3.3.1&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
        &lt;exclusions&gt;
            &lt;exclusion&gt;
                &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;
                &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;
            &lt;/exclusion&gt;
        &lt;/exclusions&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<h3><a id="1-3%E3%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BD%93%E7%B1%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.3、创建实体类</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo.entity;

@TableName(&quot;t_user&quot;)
@Data
public class User {
    @TableId(type = IdType.AUTO)
    private Long id;
    private String uname;
}
</code></pre>
<h3><a id="1-4%E3%80%81%E5%88%9B%E5%BB%BAmapper" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.4、创建Mapper</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo.mapper;

@Mapper
public interface UserMapper extends BaseMapper&lt;User&gt; {
}
</code></pre>
<h3><a id="1-5%E3%80%81%E9%85%8D%E7%BD%AE%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.5、配置读写分离</h3>
<p>application.properties：</p>
<pre class="line-numbers"><code class="language-properties"># 应用名称
spring.application.name=sharging-jdbc-demo
# 开发环境设置
spring.profiles.active=dev
# 内存模式
spring.shardingsphere.mode.type=Memory

# 配置真实数据源
spring.shardingsphere.datasource.names=master,slave1,slave2

# 配置第 1 个数据源
spring.shardingsphere.datasource.master.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.master.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.master.jdbc-url=jdbc:mysql://192.168.100.201:3306/db_user
spring.shardingsphere.datasource.master.username=root
spring.shardingsphere.datasource.master.password=123456

# 配置第 2 个数据源
spring.shardingsphere.datasource.slave1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.slave1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.slave1.jdbc-url=jdbc:mysql://192.168.100.201:3307/db_user
spring.shardingsphere.datasource.slave1.username=root
spring.shardingsphere.datasource.slave1.password=123456

# 配置第 3 个数据源
spring.shardingsphere.datasource.slave2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.slave2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.slave2.jdbc-url=jdbc:mysql://192.168.100.201:3308/db_user
spring.shardingsphere.datasource.slave2.username=root
spring.shardingsphere.datasource.slave2.password=123456

# 读写分离类型，如: Static，Dynamic
spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.type=Static
# 写数据源名称
spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.write-data-source-name=master
# 读数据源名称，多个从数据源用逗号分隔
spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.read-data-source-names=slave1,slave2

# 负载均衡算法名称
spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.load-balancer-name=alg_round

# 负载均衡算法配置
# 负载均衡算法类型
spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_round.type=ROUND_ROBIN
spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_random.type=RANDOM
spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.type=WEIGHT
spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave1=1
spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave2=2

# 打印SQl
spring.shardingsphere.props.sql-show=true
</code></pre>
<h2><a id="2%E3%80%81%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2、测试</h2>
<h3><a id="2-1%E3%80%81%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.1、读写分离测试</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo;

@SpringBootTest
class ReadwriteTest {

    @Autowired
    private UserMapper userMapper;

    /**
     * 写入数据的测试
     */
    @Test
    public void testInsert(){

        User user = new User();
        user.setUname(&quot;张三丰&quot;);
        userMapper.insert(user);
    }

}
</code></pre>
<h3><a id="2-2%E3%80%81%E4%BA%8B%E5%8A%A1%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.2、事务测试</h3>
<p>为了保证主从库间的事务一致性，避免跨服务的分布式事务，ShardingSphere-JDBC的<code>主从模型中，事务中的数据读写均用主库</code>。</p>
<ul>
<li>不添加@Transactional：insert对主库操作，select对从库操作</li>
<li>添加@Transactional：则insert和select均对主库操作</li>
<li>**注意：**在JUnit环境下的@Transactional注解，默认情况下就会对事务进行回滚（即使在没加注解@Rollback，也会对事务回滚）</li>
</ul>
<pre class="line-numbers"><code class="language-java">/**
     * 事务测试
     */
@Transactional//开启事务
@Test
public void testTrans(){

    User user = new User();
    user.setUname(&quot;铁锤&quot;);
    userMapper.insert(user);

    List&lt;User&gt; users = userMapper.selectList(null);
}
</code></pre>
<h3><a id="2-3%E3%80%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.3、负载均衡测试</h3>
<pre class="line-numbers"><code class="language-java">
/**
     * 读数据测试
     */
@Test
public void testSelectAll(){
    List&lt;User&gt; users = userMapper.selectList(null);
    List&lt;User&gt; users = userMapper.selectList(null);//执行第二次测试负载均衡
    users.forEach(System.out::println);
}

</code></pre>
<p>也可以在web请求中测试负载均衡</p>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo.controller;

@RestController
@RequestMapping(&quot;/userController&quot;)
public class UserController {

    @Autowired
    private UserMapper userMapper;

    /**
     * 测试负载均衡策略
     */
    @GetMapping(&quot;selectAll&quot;)
    public void selectAll(){
        List&lt;User&gt; users = userMapper.selectList(null);
        users.forEach(System.out::println);
    }
}
</code></pre>
<h1><a id="%E7%AC%AC05%E7%AB%A0-shardingsphere-jdbc%E5%9E%82%E7%9B%B4%E5%88%86%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第05章 ShardingSphere-JDBC垂直分片</h1>
<h2><a id="1%E3%80%81%E5%87%86%E5%A4%87%E6%9C%8D%E5%8A%A1%E5%99%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1、准备服务器</h2>
<p>服务器规划：使用<code>docker</code>方式创建如下容器</p>
<p><img src="assets/image-20220807232456342.png" alt="image-20220807232456342" /></p>
<ul>
<li>
<p>服务器：容器名<code>server-user</code>，端口<code>3301</code></p>
</li>
<li>
<p>服务器：容器名<code>server-order</code>，端口<code>3302</code></p>
</li>
</ul>
<h3><a id="1-1%E3%80%81%E5%88%9B%E5%BB%BAserver-user%E5%AE%B9%E5%99%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.1、创建server-user容器</h3>
<ul>
<li><strong>step1：创建容器：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-shell">docker run -d \
-p 3301:3306 \
-v /atguigu/server/user/conf:/etc/mysql/conf.d \
-v /atguigu/server/user/data:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=123456 \
--name server-user \
mysql:8.0.29
</code></pre>
<ul>
<li><strong>step2：登录MySQL服务器：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-shell">#进入容器：
docker exec -it server-user env LANG=C.UTF-8 /bin/bash
#进入容器内的mysql命令行
mysql -uroot -p
#修改默认密码插件
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
</code></pre>
<ul>
<li><strong>step3：创建数据库：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-sql">CREATE DATABASE db_user;
USE db_user;
CREATE TABLE t_user (
 id BIGINT AUTO_INCREMENT,
 uname VARCHAR(30),
 PRIMARY KEY (id)
);
</code></pre>
<h3><a id="1-2%E3%80%81%E5%88%9B%E5%BB%BAserver-order%E5%AE%B9%E5%99%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.2、创建server-order容器</h3>
<ul>
<li><strong>step1：创建容器：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-shell">docker run -d \
-p 3302:3306 \
-v /atguigu/server/order/conf:/etc/mysql/conf.d \
-v /atguigu/server/order/data:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=123456 \
--name server-order \
mysql:8.0.29
</code></pre>
<ul>
<li><strong>step2：登录MySQL服务器：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-shell">#进入容器：
docker exec -it server-order env LANG=C.UTF-8 /bin/bash
#进入容器内的mysql命令行
mysql -uroot -p
#修改默认密码插件
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
</code></pre>
<ul>
<li><strong>step3：创建数据库：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-sql">CREATE DATABASE db_order;
USE db_order;
CREATE TABLE t_order (
  id BIGINT AUTO_INCREMENT,
  order_no VARCHAR(30),
  user_id BIGINT,
  amount DECIMAL(10,2),
  PRIMARY KEY(id) 
);
</code></pre>
<h2><a id="2%E3%80%81%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2、程序实现</h2>
<h3><a id="2-1%E3%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BD%93%E7%B1%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.1、创建实体类</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo.entity;

@TableName(&quot;t_order&quot;)
@Data
public class Order {
    @TableId(type = IdType.AUTO)
    private Long id;
    private String orderNo;
    private Long userId;
    private BigDecimal amount;
}
</code></pre>
<h3><a id="2-2%E3%80%81%E5%88%9B%E5%BB%BAmapper" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.2、创建Mapper</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo.mapper;

@Mapper
public interface OrderMapper extends BaseMapper&lt;Order&gt; {
}
</code></pre>
<h3><a id="2-3%E3%80%81%E9%85%8D%E7%BD%AE%E5%9E%82%E7%9B%B4%E5%88%86%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.3、配置垂直分片</h3>
<pre class="line-numbers"><code class="language-properties"># 应用名称
spring.application.name=sharding-jdbc-demo
# 环境设置
spring.profiles.active=dev

# 配置真实数据源
spring.shardingsphere.datasource.names=server-user,server-order

# 配置第 1 个数据源
spring.shardingsphere.datasource.server-user.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-user.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.server-user.jdbc-url=jdbc:mysql://192.168.100.201:3301/db_user
spring.shardingsphere.datasource.server-user.username=root
spring.shardingsphere.datasource.server-user.password=123456

# 配置第 2 个数据源
spring.shardingsphere.datasource.server-order.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-order.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.server-order.jdbc-url=jdbc:mysql://192.168.100.201:3302/db_order
spring.shardingsphere.datasource.server-order.username=root
spring.shardingsphere.datasource.server-order.password=123456

# 标准分片表配置（数据节点）
# spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值
# 值由数据源名 + 表名组成，以小数点分隔。
# &lt;table-name&gt;：逻辑表名
spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=server-user.t_user
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=server-order.t_order


# 打印SQL
spring.shardingsphere.props.sql-show=true

</code></pre>
<h2><a id="3%E3%80%81%E6%B5%8B%E8%AF%95%E5%9E%82%E7%9B%B4%E5%88%86%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3、测试垂直分片</h2>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo;

@SpringBootTest
public class ShardingTest {


    @Autowired
    private UserMapper userMapper;

    @Autowired
    private OrderMapper orderMapper;

    /**
     * 垂直分片：插入数据测试
     */
    @Test
    public void testInsertOrderAndUser(){

        User user = new User();
        user.setUname(&quot;强哥&quot;);
        userMapper.insert(user);

        Order order = new Order();
        order.setOrderNo(&quot;ATGUIGU001&quot;);
        order.setUserId(user.getId());
        order.setAmount(new BigDecimal(100));
        orderMapper.insert(order);

    }

    /**
     * 垂直分片：查询数据测试
     */
    @Test
    public void testSelectFromOrderAndUser(){
        User user = userMapper.selectById(1L);
        Order order = orderMapper.selectById(1L);
    }
}
</code></pre>
<h3><a id="%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>常见错误</h3>
<p><img src="assets/image-20220810163534068.png" alt="image-20220810163534068" /></p>
<p>ShardingSphere-JDBC远程连接的方式默认的密码加密规则是：mysql_native_password</p>
<p>因此需要在服务器端修改服务器的密码加密规则，如下：</p>
<pre class="line-numbers"><code class="language-sql">ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
</code></pre>
<h1><a id="%E7%AC%AC06%E7%AB%A0-shardingsphere-jdbc%E6%B0%B4%E5%B9%B3%E5%88%86%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第06章 ShardingSphere-JDBC水平分片</h1>
<h2><a id="1%E3%80%81%E5%87%86%E5%A4%87%E6%9C%8D%E5%8A%A1%E5%99%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1、准备服务器</h2>
<p>服务器规划：使用<code>docker</code>方式创建如下容器</p>
<p><img src="assets/image-20220808033239206.png" alt="image-20220808033239206" /></p>
<ul>
<li>
<p>服务器：容器名<code>server-order0</code>，端口<code>3310</code></p>
</li>
<li>
<p>服务器：容器名<code>server-order1</code>，端口<code>3311</code></p>
</li>
</ul>
<h3><a id="1-1%E3%80%81%E5%88%9B%E5%BB%BAserver-order0%E5%AE%B9%E5%99%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.1、创建server-order0容器</h3>
<ul>
<li><strong>step1：创建容器：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-shell">docker run -d \
-p 3310:3306 \
-v /atguigu/server/order0/conf:/etc/mysql/conf.d \
-v /atguigu/server/order0/data:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=123456 \
--name server-order0 \
mysql:8.0.29
</code></pre>
<ul>
<li><strong>step2：登录MySQL服务器：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-shell">#进入容器：
docker exec -it server-order0 env LANG=C.UTF-8 /bin/bash
#进入容器内的mysql命令行
mysql -uroot -p
#修改默认密码插件
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
</code></pre>
<ul>
<li><strong>step3：创建数据库：</strong></li>
</ul>
<p><code>注意：</code>水平分片的id需要在业务层实现，<code>不能依赖数据库的主键自增</code></p>
<pre class="line-numbers"><code class="language-sql">CREATE DATABASE db_order;
USE db_order;
CREATE TABLE t_order0 (
  id BIGINT,
  order_no VARCHAR(30),
  user_id BIGINT,
  amount DECIMAL(10,2),
  PRIMARY KEY(id) 
);
CREATE TABLE t_order1 (
  id BIGINT,
  order_no VARCHAR(30),
  user_id BIGINT,
  amount DECIMAL(10,2),
  PRIMARY KEY(id) 
);
</code></pre>
<h3><a id="1-2%E3%80%81%E5%88%9B%E5%BB%BAserver-order1%E5%AE%B9%E5%99%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.2、创建server-order1容器</h3>
<ul>
<li><strong>step1：创建容器：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-shell">docker run -d \
-p 3311:3306 \
-v /atguigu/server/order1/conf:/etc/mysql/conf.d \
-v /atguigu/server/order1/data:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=123456 \
--name server-order1 \
mysql:8.0.29
</code></pre>
<ul>
<li><strong>step2：登录MySQL服务器：</strong></li>
</ul>
<pre class="line-numbers"><code class="language-shell">#进入容器：
docker exec -it server-order1 env LANG=C.UTF-8 /bin/bash
#进入容器内的mysql命令行
mysql -uroot -p
#修改默认密码插件
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
</code></pre>
<ul>
<li>**step3：创建数据库：**和server-order0相同</li>
</ul>
<p><code>注意：</code>水平分片的id需要在业务层实现，不能依赖数据库的主键自增</p>
<pre class="line-numbers"><code class="language-sql">CREATE DATABASE db_order;
USE db_order;
CREATE TABLE t_order0 (
  id BIGINT,
  order_no VARCHAR(30),
  user_id BIGINT,
  amount DECIMAL(10,2),
  PRIMARY KEY(id) 
);
CREATE TABLE t_order1 (
  id BIGINT,
  order_no VARCHAR(30),
  user_id BIGINT,
  amount DECIMAL(10,2),
  PRIMARY KEY(id) 
);
</code></pre>
<h2><a id="2%E3%80%81%E5%9F%BA%E6%9C%AC%E6%B0%B4%E5%B9%B3%E5%88%86%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2、基本水平分片</h2>
<h3><a id="2-1%E3%80%81%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.1、基本配置</h3>
<pre class="line-numbers"><code class="language-properties">#========================基本配置
# 应用名称
spring.application.name=sharging-jdbc-demo
# 开发环境设置
spring.profiles.active=dev
# 内存模式
spring.shardingsphere.mode.type=Memory
# 打印SQl
spring.shardingsphere.props.sql-show=true
</code></pre>
<h3><a id="2-2%E3%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.2、数据源配置</h3>
<pre class="line-numbers"><code class="language-properties">#========================数据源配置
# 配置真实数据源
spring.shardingsphere.datasource.names=server-user,server-order0,server-order1

# 配置第 1 个数据源
spring.shardingsphere.datasource.server-user.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-user.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.server-user.jdbc-url=jdbc:mysql://192.168.100.201:3301/db_user
spring.shardingsphere.datasource.server-user.username=root
spring.shardingsphere.datasource.server-user.password=123456

# 配置第 2 个数据源
spring.shardingsphere.datasource.server-order.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-order.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.server-order.jdbc-url=jdbc:mysql://192.168.100.201:3310/db_order
spring.shardingsphere.datasource.server-order.username=root
spring.shardingsphere.datasource.server-order.password=123456

# 配置第 3 个数据源
spring.shardingsphere.datasource.server-order.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-order.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.server-order.jdbc-url=jdbc:mysql://192.168.100.201:3311/db_order
spring.shardingsphere.datasource.server-order.username=root
spring.shardingsphere.datasource.server-order.password=123456
</code></pre>
<h3><a id="2-3%E3%80%81%E6%A0%87%E6%A4%8E%E5%88%86%E7%89%87%E8%A1%A8%E9%85%8D%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.3、标椎分片表配置</h3>
<pre class="line-numbers"><code class="language-properties">#========================标准分片表配置（数据节点配置）
# spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值
# 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。
# &lt;table-name&gt;：逻辑表名
spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=server-user.t_user
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=server-order0.t_order0,server-order0.t_order1,server-order1.t_order0,server-order1.t_order1
</code></pre>
<p>修改Order实体类的主键策略：</p>
<pre class="line-numbers"><code class="language-java">//@TableId(type = IdType.AUTO)//依赖数据库的主键自增策略
@TableId(type = IdType.ASSIGN_ID)//分布式id
</code></pre>
<p>测试：保留上面配置中的一个分片表节点分别进行测试，检查每个分片节点是否可用</p>
<pre class="line-numbers"><code class="language-java">/**
     * 水平分片：插入数据测试
     */
@Test
public void testInsertOrder(){

    Order order = new Order();
    order.setOrderNo(&quot;ATGUIGU001&quot;);
    order.setUserId(1L);
    order.setAmount(new BigDecimal(100));
    orderMapper.insert(order);
}
</code></pre>
<h3><a id="2-4%E3%80%81%E8%A1%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.4、行表达式</h3>
<p>优化上一步的分片表配置</p>
<p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/inline-expression/">https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/inline-expression/</a></p>
<pre class="line-numbers"><code class="language-properties">#========================标准分片表配置（数据节点配置）
# spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值
# 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。
# &lt;table-name&gt;：逻辑表名
spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=server-user.t_user
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=server-order$-&gt;{0..1}.t_order$-&gt;{0..1}
</code></pre>
<h3><a id="2-5%E3%80%81%E5%88%86%E7%89%87%E7%AE%97%E6%B3%95%E9%85%8D%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.5、分片算法配置</h3>
<p><strong>水平分库：</strong></p>
<p>分片规则：order表中<code>user_id</code>为偶数时，数据插入<code>server-order0服务器</code>，<code>user_id</code>为奇数时，数据插入<code>server-order1服务器</code>。这样分片的好处是，同一个用户的订单数据，一定会被插入到同一台服务器上，查询一个用户的订单时效率较高。</p>
<pre class="line-numbers"><code class="language-properties">#------------------------分库策略
# 分片列名称
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=user_id
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=alg_inline_userid

#------------------------分片算法配置
# 行表达式分片算法
# 分片算法类型
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.type=INLINE
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.props.algorithm-expression=server-order$-&gt;{user_id % 2}

# 取模分片算法
# 分片算法类型
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.type=MOD
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.props.sharding-count=2
</code></pre>
<p>为了方便测试，先设置只在 <code>t_order0</code>表上进行测试</p>
<pre class="line-numbers"><code class="language-properties">xxx.actual-data-nodes=server-order$-&gt;{0..1}.t_order0
</code></pre>
<p>测试：可以分别测试行表达式分片算法和取模分片算法</p>
<pre class="line-numbers"><code class="language-java">/**
     * 水平分片：分库插入数据测试
     */
@Test
public void testInsertOrderDatabaseStrategy(){

    for (long i = 0; i &lt; 4; i++) {
        Order order = new Order();
        order.setOrderNo(&quot;ATGUIGU001&quot;);
        order.setUserId(i + 1);
        order.setAmount(new BigDecimal(100));
        orderMapper.insert(order);
    }

}
</code></pre>
<p><strong>水平分表：</strong></p>
<p>分片规则：order表中<code>order_no的哈希值为偶数时</code>，数据插入对应服务器的<code>t_order0表</code>，<code>order_no的哈希值为奇数时</code>，数据插入对应服务器的<code>t_order1表</code>。因为order_no是字符串形式，因此不能直接取模。</p>
<pre class="line-numbers"><code class="language-properties">#------------------------分表策略
# 分片列名称
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_no
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=alg_hash_mod


#------------------------分片算法配置
# 哈希取模分片算法
# 分片算法类型
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.type=HASH_MOD
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.props.sharding-count=2

</code></pre>
<p>测试前不要忘记将如下节点改回原来的状态</p>
<pre class="line-numbers"><code class="language-properties">xxx.actual-data-nodes=server-order$-&gt;{0..1}.t_order$-&gt;{0..1}
</code></pre>
<p>测试：</p>
<pre class="line-numbers"><code class="language-java">/**
     * 水平分片：分表插入数据测试
     */
@Test
public void testInsertOrderTableStrategy(){

    for (long i = 1; i &lt; 5; i++) {

        Order order = new Order();
        order.setOrderNo(&quot;ATGUIGU&quot; + i);
        order.setUserId(1L);
        order.setAmount(new BigDecimal(100));
        orderMapper.insert(order);
    }

    for (long i = 5; i &lt; 9; i++) {

        Order order = new Order();
        order.setOrderNo(&quot;ATGUIGU&quot; + i);
        order.setUserId(2L);
        order.setAmount(new BigDecimal(100));
        orderMapper.insert(order);
    }
}

/**
     * 测试哈希取模
     */
@Test
public void testHash(){

    //注意hash取模的结果是整个字符串hash后再取模，和数值后缀是奇数还是偶数无关
    System.out.println(&quot;ATGUIGU001&quot;.hashCode() % 2);
    System.out.println(&quot;ATGUIGU0011&quot;.hashCode() % 2);
}
</code></pre>
<p><strong>查询测试：</strong></p>
<pre class="line-numbers"><code class="language-java">/**
     * 水平分片：查询所有记录
     * 查询了两个数据源，每个数据源中使用UNION ALL连接两个表
     */
@Test
public void testShardingSelectAll(){

    List&lt;Order&gt; orders = orderMapper.selectList(null);
    orders.forEach(System.out::println);
}

/**
     * 水平分片：根据user_id查询记录
     * 查询了一个数据源，每个数据源中使用UNION ALL连接两个表
     */
@Test
public void testShardingSelectByUserId(){

    QueryWrapper&lt;Order&gt; orderQueryWrapper = new QueryWrapper&lt;&gt;();
    orderQueryWrapper.eq(&quot;user_id&quot;, 1L);
    List&lt;Order&gt; orders = orderMapper.selectList(orderQueryWrapper);
    orders.forEach(System.out::println);
}
</code></pre>
<h3><a id="2-6%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.6、分布式序列算法</h3>
<p><strong>雪花算法：</strong></p>
<p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/key-generator/">https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/key-generator/</a></p>
<p>水平分片需要关注全局序列，因为不能简单的使用基于数据库的主键自增。</p>
<p>这里有两种方案：一种是基于MyBatisPlus的id策略；一种是ShardingSphere-JDBC的全局序列配置。</p>
<p><code>基于MyBatisPlus的id策略：</code>将Order类的id设置成如下形式</p>
<pre class="line-numbers"><code class="language-java">@TableId(type = IdType.ASSIGN_ID)
private Long id;
</code></pre>
<p><code>基于ShardingSphere-JDBC的全局序列配置</code>：和前面的MyBatisPlus的策略二选一</p>
<pre class="line-numbers"><code class="language-properties">#------------------------分布式序列策略配置
# 分布式序列列名称
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=id
# 分布式序列算法名称
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=alg_snowflake

# 分布式序列算法配置
# 分布式序列算法类型
spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.type=SNOWFLAKE
# 分布式序列算法属性配置
#spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.props.xxx=
</code></pre>
<p>此时，需要将实体类中的id策略修改成以下形式：</p>
<pre class="line-numbers"><code class="language-java">//当配置了shardingsphere-jdbc的分布式序列时，自动使用shardingsphere-jdbc的分布式序列
//当没有配置shardingsphere-jdbc的分布式序列时，自动依赖数据库的主键自增策略
@TableId(type = IdType.AUTO)
</code></pre>
<h2><a id="3%E3%80%81%E5%A4%9A%E8%A1%A8%E5%85%B3%E8%81%94" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3、多表关联</h2>
<h3><a id="3-1%E3%80%81%E5%88%9B%E5%BB%BA%E5%85%B3%E8%81%94%E8%A1%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.1、创建关联表</h3>
<p>在<code>server-order0、server-order1</code>服务器中分别创建两张订单详情表<code>t_order_item0、t_order_item1</code></p>
<p>我们希望<code>同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联</code>，因此这两张表我们使用相同的分片策略。</p>
<p>那么在<code>t_order_item</code>中我们也需要创建<code>order_no</code>和<code>user_id</code>这两个分片键</p>
<pre class="line-numbers"><code class="language-sql">CREATE TABLE t_order_item0(
    id BIGINT,
    order_no VARCHAR(30),
    user_id BIGINT,
    price DECIMAL(10,2),
    `count` INT,
    PRIMARY KEY(id)
);

CREATE TABLE t_order_item1(
    id BIGINT,
    order_no VARCHAR(30),
    user_id BIGINT,
    price DECIMAL(10,2),
    `count` INT,
    PRIMARY KEY(id)
);
</code></pre>
<h3><a id="3-2%E3%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BD%93%E7%B1%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.2、创建实体类</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo.entity;

@TableName(&quot;t_order_item&quot;)
@Data
public class OrderItem {
    //当配置了shardingsphere-jdbc的分布式序列时，自动使用shardingsphere-jdbc的分布式序列
    @TableId(type = IdType.AUTO)
    private Long id;
    private String orderNo;
    private Long userId;
    private BigDecimal price;
    private Integer count;
}
</code></pre>
<h3><a id="3-3%E3%80%81%E5%88%9B%E5%BB%BAmapper" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.3、创建Mapper</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shargingjdbcdemo.mapper;

@Mapper
public interface OrderItemMapper extends BaseMapper&lt;OrderItem&gt; {

}
</code></pre>
<h3><a id="3-4%E3%80%81%E9%85%8D%E7%BD%AE%E5%85%B3%E8%81%94%E8%A1%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.4、配置关联表</h3>
<p>t_order_item的分片表、分片策略、分布式序列策略和t_order一致</p>
<pre class="line-numbers"><code class="language-properties">#------------------------标准分片表配置（数据节点配置）
spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes=server-order$-&gt;{0..1}.t_order_item$-&gt;{0..1}

#------------------------分库策略
# 分片列名称
spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-column=user_id
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-algorithm-name=alg_mod

#------------------------分表策略
# 分片列名称
spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column=order_no
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-algorithm-name=alg_hash_mod

#------------------------分布式序列策略配置
# 分布式序列列名称
spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.column=id
# 分布式序列算法名称
spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.key-generator-name=alg_snowflake
</code></pre>
<h3><a id="3-5%E3%80%81%E6%B5%8B%E8%AF%95%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.5、测试插入数据</h3>
<p>同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联</p>
<pre class="line-numbers"><code class="language-java">/**
     * 测试关联表插入
     */
@Test
public void testInsertOrderAndOrderItem(){

    for (long i = 1; i &lt; 3; i++) {

        Order order = new Order();
        order.setOrderNo(&quot;ATGUIGU&quot; + i);
        order.setUserId(1L);
        orderMapper.insert(order);

        for (long j = 1; j &lt; 3; j++) {
            OrderItem orderItem = new OrderItem();
            orderItem.setOrderNo(&quot;ATGUIGU&quot; + i);
            orderItem.setUserId(1L);
            orderItem.setPrice(new BigDecimal(10));
            orderItem.setCount(2);
            orderItemMapper.insert(orderItem);
        }
    }

    for (long i = 5; i &lt; 7; i++) {

        Order order = new Order();
        order.setOrderNo(&quot;ATGUIGU&quot; + i);
        order.setUserId(2L);
        orderMapper.insert(order);

        for (long j = 1; j &lt; 3; j++) {
            OrderItem orderItem = new OrderItem();
            orderItem.setOrderNo(&quot;ATGUIGU&quot; + i);
            orderItem.setUserId(2L);
            orderItem.setPrice(new BigDecimal(1));
            orderItem.setCount(3);
            orderItemMapper.insert(orderItem);
        }
    }

}
</code></pre>
<h2><a id="4%E3%80%81%E7%BB%91%E5%AE%9A%E8%A1%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4、绑定表</h2>
<p>**需求：**查询每个订单的订单号和总订单金额</p>
<h3><a id="4-1%E3%80%81%E5%88%9B%E5%BB%BAvo%E5%AF%B9%E8%B1%A1" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.1、创建VO对象</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo.entity;

@Data
public class OrderVo {
    private String orderNo;
    private BigDecimal amount;
}
</code></pre>
<h3><a id="4-2%E3%80%81%E6%B7%BB%E5%8A%A0mapper%E6%96%B9%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.2、添加Mapper方法</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo.mapper;

@Mapper
public interface OrderMapper extends BaseMapper&lt;Order&gt; {

    @Select({&quot;SELECT o.order_no, SUM(i.price * i.count) AS amount&quot;,
            &quot;FROM t_order o JOIN t_order_item i ON o.order_no = i.order_no&quot;,
            &quot;GROUP BY o.order_no&quot;})
    List&lt;OrderVo&gt; getOrderAmount();

}
</code></pre>
<h3><a id="4-3%E3%80%81%E6%B5%8B%E8%AF%95%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.3、测试关联查询</h3>
<pre class="line-numbers"><code class="language-java">/**
     * 测试关联表查询
     */
@Test
public void testGetOrderAmount(){

    List&lt;OrderVo&gt; orderAmountList = orderMapper.getOrderAmount();
    orderAmountList.forEach(System.out::println);
}
</code></pre>
<h3><a id="4-4%E3%80%81%E9%85%8D%E7%BD%AE%E7%BB%91%E5%AE%9A%E8%A1%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.4、配置绑定表</h3>
<p>在原来水平分片配置的基础上添加如下配置：</p>
<pre class="line-numbers"><code class="language-properties">#------------------------绑定表
spring.shardingsphere.rules.sharding.binding-tables[0]=t_order,t_order_item
</code></pre>
<p>配置完绑定表后再次进行关联查询的测试：</p>
<ul>
<li>
<p>**如果不配置绑定表：测试的结果为8个SQL。**多表关联查询会出现笛卡尔积关联。</p>
</li>
<li>
<p><strong>如果配置绑定表：测试的结果为4个SQL。</strong> 多表关联查询不会出现笛卡尔积关联，关联查询效率将大大提升。</p>
</li>
</ul>
<p><code>绑定表：</code>指分片规则一致的一组分片表。 使用绑定表进行多表关联查询时，必须使用分片键进行关联，否则会出现笛卡尔积关联或跨库关联，从而影响查询效率。</p>
<h2><a id="5%E3%80%81%E5%B9%BF%E6%92%AD%E8%A1%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>5、广播表</h2>
<h3><a id="4-1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%BF%E6%92%AD%E8%A1%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.1、什么是广播表</h3>
<p>指所有的分片数据源中都存在的表，表结构及其数据在每个数据库中均完全一致。 适用于数据量不大且需要与海量数据的表进行关联查询的场景，例如：字典表。</p>
<p>广播具有以下特性：</p>
<p>（1）插入、更新操作会实时在所有节点上执行，保持各个分片的数据一致性</p>
<p>（2）查询操作，只从一个节点获取</p>
<p>（3）可以跟任何一个表进行 JOIN 操作</p>
<h3><a id="4-2%E3%80%81%E5%88%9B%E5%BB%BA%E5%B9%BF%E6%92%AD%E8%A1%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.2、创建广播表</h3>
<p>在server-order0、server-order1和server-user服务器中分别创建t_dict表</p>
<pre class="line-numbers"><code class="language-sql">CREATE TABLE t_dict(
    id BIGINT,
    dict_type VARCHAR(200),
    PRIMARY KEY(id)
);
</code></pre>
<h3><a id="4-3%E3%80%81%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.3、程序实现</h3>
<h4><a id="4-3-1%E3%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BD%93%E7%B1%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.3.1、创建实体类</h4>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo.entity;

@TableName(&quot;t_dict&quot;)
@Data
public class Dict {
    //可以使用MyBatisPlus的雪花算法
    @TableId(type = IdType.ASSIGN_ID)
    private Long id;
    private String dictType;
}
</code></pre>
<h4><a id="4-3-2%E3%80%81%E5%88%9B%E5%BB%BAmapper" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.3.2、创建Mapper</h4>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingjdbcdemo.mapper;

@Mapper
public interface DictMapper extends BaseMapper&lt;Dict&gt; {
}
</code></pre>
<h4><a id="4-3-3%E3%80%81%E9%85%8D%E7%BD%AE%E5%B9%BF%E6%92%AD%E8%A1%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.3.3、配置广播表</h4>
<pre class="line-numbers"><code class="language-properties">#数据节点可不配置，默认情况下，向所有数据源广播
spring.shardingsphere.rules.sharding.tables.t_dict.actual-data-nodes=server-user.t_dict,server-order$-&gt;{0..1}.t_dict

# 广播表
spring.shardingsphere.rules.sharding.broadcast-tables[0]=t_dict
</code></pre>
<h3><a id="4-4%E3%80%81%E6%B5%8B%E8%AF%95%E5%B9%BF%E6%92%AD%E8%A1%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.4、测试广播表</h3>
<pre class="line-numbers"><code class="language-java">@Autowired
private DictMapper dictMapper;

/**
     * 广播表：每个服务器中的t_dict同时添加了新数据
     */
@Test
public void testBroadcast(){

    Dict dict = new Dict();
    dict.setDictType(&quot;type1&quot;);
    dictMapper.insert(dict);
}

/**
     * 查询操作，只从一个节点获取数据
     * 随机负载均衡规则
     */
@Test
public void testSelectBroadcast(){

    List&lt;Dict&gt; dicts = dictMapper.selectList(null);
    dicts.forEach(System.out::println);
}
</code></pre>
<h1><a id="%E7%AC%AC07%E7%AB%A0%E5%90%AF%E5%8A%A8-shardingsphere-proxy" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第07章 启动ShardingSphere-Proxy</h1>
<h2><a id="1%E3%80%81%E8%8E%B7%E5%8F%96" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1、获取</h2>
<p>目前 ShardingSphere-Proxy 提供了 3 种获取方式：</p>
<ul>
<li><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/bin/">二进制发布包</a></li>
<li><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/docker/">Docker</a></li>
<li><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/helm/">Helm</a></li>
</ul>
<h2><a id="2%E3%80%81%E4%BD%BF%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8F%91%E5%B8%83%E5%8C%85%E5%AE%89%E8%A3%85" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2、使用二进制发布包安装</h2>
<p>二进制包既可以Linux系统运行，又可以在windows系统运行</p>
<p><strong>step1：解压二进制包</strong></p>
<p><code>apache-shardingsphere-5.1.1-shardingsphere-proxy-bin.tar.gz</code></p>
<p>windows：使用解压软件解压文件</p>
<p>Linux：将文件上传至/opt目录，并解压</p>
<pre class="line-numbers"><code class="language-shell">tar -zxvf apache-shardingsphere-5.1.1-shardingsphere-proxy-bin.tar.gz
</code></pre>
<p><strong>step2：MySQL驱动</strong></p>
<p><code>mysql-connector-java-8.0.22.jar</code></p>
<p>将MySQl驱动放至解压目录中的<code>ext-lib</code>目录</p>
<p><strong>spte3：修改配置conf/server.yaml</strong></p>
<pre class="line-numbers"><code class="language-yaml">rules:
  - !AUTHORITY
    users:
      - root@%:root
    provider:
      type: ALL_PRIVILEGES_PERMITTED

props:
  sql-show: true
</code></pre>
<p><strong>spte4：启动ShardingSphere-Proxy</strong></p>
<p>Linux 操作系统请运行 <code>bin/start.sh</code></p>
<p>Windows 操作系统请运行 <code>bin/start.bat</code></p>
<p>指定端口号和配置文件目录：<code>bin/start.bat ${proxy_port} ${proxy_conf_directory}</code></p>
<p><strong>step5：远程连接ShardingSphere-Proxy</strong></p>
<p>远程访问</p>
<pre class="line-numbers"><code class="language-shell">mysql -h192.168.100.1 -P3307 -uroot -p
</code></pre>
<p><strong>step6：访问测试</strong></p>
<pre class="line-numbers"><code class="language-sql">show databases;
</code></pre>
<p><img src="assets/image-20220819152009158.png" alt="image-20220819152009158" /></p>
<h2><a id="3%E3%80%81%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3、使用Docker安装</h2>
<p><strong>step1：启动Docker容器</strong></p>
<pre class="line-numbers"><code class="language-shell">docker run -d \
-v /atguigu/server/proxy-a/conf:/opt/shardingsphere-proxy/conf \
-v /atguigu/server/proxy-a/ext-lib:/opt/shardingsphere-proxy/ext-lib \
-e ES_JAVA_OPTS=&quot;-Xmx256m -Xms256m -Xmn128m&quot; \
-p 3321:3307 \
--name server-proxy-a \
apache/shardingsphere-proxy:5.1.1
</code></pre>
<p><strong>step2：上传MySQL驱动</strong></p>
<p>将MySQl驱动上传至<code>/atguigu/server/proxy-a/ext-lib</code>目录</p>
<p><strong>spte3：修改配置server.yaml</strong></p>
<pre class="line-numbers"><code class="language-yaml">rules:
  - !AUTHORITY
    users:
      - root@%:root
    provider:
      type: ALL_PRIVILEGES_PERMITTED

props:
  sql-show: true
</code></pre>
<p>将配置文件上传至<code>/atguigu/server/proxy-a/conf</code>目录</p>
<p><strong>spte4：重启容器</strong></p>
<pre class="line-numbers"><code class="language-shell">docker restart server-proxy-a
</code></pre>
<p><strong>step5：远程连接ShardingSphere-Proxy</strong></p>
<p>ShardingSphere-Proxy容器中默认情况下没有mysql命令行客户端的安装，因此需要远程访问</p>
<pre class="line-numbers"><code class="language-shell">mysql -h192.168.100.201 -P3321 -uroot -p
</code></pre>
<p><strong>step6：访问测试</strong></p>
<pre class="line-numbers"><code class="language-sql">show databases;
</code></pre>
<p><img src="assets/image-20220819152009158.png" alt="image-20220819152009158" /></p>
<p><strong>常见问题：docker容器无法远程连接</strong></p>
<p>容器可以成功的创建并启动，但是无法远程连接。排除防火墙和网络等问题后，看看是不是因为容器内存不足导致。</p>
<p><code>原因：</code>容器可分配内存不足</p>
<p><code>查看办法：</code>进入容器后查看ShardingSphere-Proxy的日志，如有有<code>cannot allocate memory</code>，则说明容器内存不足</p>
<pre class="line-numbers"><code class="language-shell">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash
cd /opt/shardingsphere-proxy/logs
tail stdout.log 
</code></pre>
<p><img src="assets/image-20220819151154763.png" alt="image-20220819151154763" /></p>
<p><code>解决方案：</code>创建容器的时候使用JVM参数</p>
<pre class="line-numbers"><code class="language-shell">-e ES_JAVA_OPTS=&quot;-Xmx256m -Xms256m -Xmn128m&quot;
</code></pre>
<h1><a id="%E7%AC%AC08%E7%AB%A0-shardingsphere-proxy%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第08章 ShardingSphere-Proxy读写分离</h1>
<h2><a id="1%E3%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1、修改配置文件</h2>
<p><strong>修改配置config-readwrite-splitting.yaml</strong></p>
<pre class="line-numbers"><code class="language-yaml">schemaName: readwrite_splitting_db

dataSources:
  write_ds:
    url: jdbc:mysql://192.168.100.201:3306/db_user?serverTimezone=UTC&amp;useSSL=false
    username: root
    password: 123456
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  read_ds_0:
    url: jdbc:mysql://192.168.100.201:3307/db_user?serverTimezone=UTC&amp;useSSL=false
    username: root
    password: 123456
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  read_ds_1:
    url: jdbc:mysql://192.168.100.201:3308/db_user?serverTimezone=UTC&amp;useSSL=false
    username: root
    password: 123456
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1

rules:
- !READWRITE_SPLITTING
  dataSources:
    readwrite_ds:
      type: Static
      props:
        write-data-source-name: write_ds
        read-data-source-names: read_ds_0,read_ds_1
</code></pre>
<p>将配置文件上传至<code>/atguigu/server/proxy-a/conf</code>目录</p>
<p><strong>重启容器</strong></p>
<pre class="line-numbers"><code class="language-shell">docker restart server-proxy-a
</code></pre>
<h2><a id="2%E3%80%81%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2、实时查看日志</h2>
<p>可以通过这种方式查看服务器中输出的SQL语句</p>
<pre class="line-numbers"><code class="language-shell">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash
tail -f /opt/shardingsphere-proxy/logs/stdout.log 
</code></pre>
<h2><a id="3%E3%80%81%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3、远程访问测试</h2>
<pre class="line-numbers"><code class="language-sql">mysql&gt; show databases;
mysql&gt; use readwrite_splitting_db;
mysql&gt; show tables;
mysql&gt; select * from t_user;
mysql&gt; select * from t_user;
mysql&gt; insert into t_user(uname) values('wang5');
</code></pre>
<h2><a id="4%E3%80%81%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%AE%BF%E9%97%AEproxy" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4、应用程序访问Proxy</h2>
<h3><a id="4-1%E3%80%81%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.1、创建项目</h3>
<p>项目类型：Spring Initializr</p>
<p>SpringBoot脚手架：<a href="http://start.aliyun.com">http://start.aliyun.com</a></p>
<p>项目名：sharding-proxy-demo</p>
<p>SpringBoot版本：2.3.7.RELEASE</p>
<h3><a id="4-2%E3%80%81%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.2、添加依赖</h3>
<pre class="line-numbers"><code class="language-xml">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;scope&gt;runtime&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
        &lt;version&gt;3.3.1&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
        &lt;exclusions&gt;
            &lt;exclusion&gt;
                &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;
                &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;
            &lt;/exclusion&gt;
        &lt;/exclusions&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<h3><a id="4-3%E3%80%81%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BD%93%E7%B1%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.3、创建实体类</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingproxydemo.entity;

@TableName(&quot;t_user&quot;)
@Data
public class User {
    @TableId(type = IdType.AUTO)
    private Long id;
    private String uname;
}

</code></pre>
<h3><a id="4-4%E3%80%81%E5%88%9B%E5%BB%BAmapper" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.4、创建Mapper</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingproxydemo.mapper;

@Mapper
public interface UserMapper extends BaseMapper&lt;User&gt; {
}
</code></pre>
<h3><a id="4-5%E3%80%81%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.5、配置数据源</h3>
<pre class="line-numbers"><code class="language-properties"># 应用名称
spring.application.name=sharding-proxy-demo
# 开发环境设置
spring.profiles.active=dev

#mysql数据库连接（proxy）
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://192.168.100.201:3321/readwrite_splitting_db?serverTimezone=GMT%2B8&amp;useSSL=false
spring.datasource.username=root
spring.datasource.password=root

#mybatis日志
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
</code></pre>
<h3><a id="4-6%E3%80%81%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.6、测试</h3>
<pre class="line-numbers"><code class="language-java">package com.atguigu.shardingproxydemo;

@SpringBootTest
class ShardingProxyDemoApplicationTests {

    @Autowired
    private UserMapper userMapper;

    /**
     * 读数据测试
     */
    @Test
    public void testSelectAll(){
        List&lt;User&gt; users = userMapper.selectList(null);
        users.forEach(System.out::println);
    }
}
</code></pre>
<h1><a id="%E7%AC%AC09%E7%AB%A0-shardingsphere-proxy%E5%9E%82%E7%9B%B4%E5%88%86%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第09章 ShardingSphere-Proxy垂直分片</h1>
<h2><a id="1%E3%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1、修改配置文件</h2>
<p><strong>修改配置config-sharding.yaml</strong></p>
<pre class="line-numbers"><code class="language-yaml">schemaName: sharding_db

dataSources:
  ds_0:
    url: jdbc:mysql://192.168.100.201:3301/db_user?serverTimezone=UTC&amp;useSSL=false
    username: root
    password: 123456
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  ds_1:
    url: jdbc:mysql://192.168.100.201:3302/db_order?serverTimezone=UTC&amp;useSSL=false
    username: root
    password: 123456
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1

rules:
- !SHARDING
  tables:
    t_user:
      actualDataNodes: ds_0.t_user
    t_order:
      actualDataNodes: ds_1.t_order
</code></pre>
<h2><a id="2%E3%80%81%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2、实时查看日志</h2>
<p>可以通过这种方式查看服务器中输出的SQL语句</p>
<pre class="line-numbers"><code class="language-shell">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash
tail -f /opt/shardingsphere-proxy/logs/stdout.log 
</code></pre>
<h2><a id="3%E3%80%81%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3、远程访问测试</h2>
<pre class="line-numbers"><code class="language-sql">mysql&gt; show databases;
mysql&gt; use sharding_db;
mysql&gt; show tables;
mysql&gt; select * from t_order;
mysql&gt; select * from t_user;
</code></pre>
<h1><a id="%E7%AC%AC10%E7%AB%A0-shardingsphere-proxy%E6%B0%B4%E5%B9%B3%E5%88%86%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第10章 ShardingSphere-Proxy水平分片</h1>
<h2><a id="1%E3%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1、修改配置文件</h2>
<p><strong>修改配置config-sharding.yaml</strong></p>
<pre class="line-numbers"><code class="language-yaml">schemaName: sharding_db

dataSources:
  ds_user:
    url: jdbc:mysql://192.168.100.201:3301/db_user?serverTimezone=UTC&amp;useSSL=false
    username: root
    password: 123456
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  ds_order0:
    url: jdbc:mysql://192.168.100.201:3310/db_order?serverTimezone=UTC&amp;useSSL=false
    username: root
    password: 123456
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  ds_order1:
    url: jdbc:mysql://192.168.100.201:3311/db_order?serverTimezone=UTC&amp;useSSL=false
    username: root
    password: 123456
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1

rules:
- !SHARDING
  tables:
    t_user:
      actualDataNodes: ds_user.t_user

    t_order:
      actualDataNodes: ds_order${0..1}.t_order${0..1}
      databaseStrategy:
        standard:
          shardingColumn: user_id
          shardingAlgorithmName: alg_mod
      tableStrategy:
        standard:
          shardingColumn: order_no
          shardingAlgorithmName: alg_hash_mod
      keyGenerateStrategy:
        column: id
        keyGeneratorName: snowflake
    t_order_item:
      actualDataNodes: ds_order${0..1}.t_order_item${0..1}
      databaseStrategy:
        standard:
          shardingColumn: user_id
          shardingAlgorithmName: alg_mod
      tableStrategy:
        standard:
          shardingColumn: order_no
          shardingAlgorithmName: alg_hash_mod
      keyGenerateStrategy:
        column: id
        keyGeneratorName: snowflake

  bindingTables:
    - t_order,t_order_item


  broadcastTables:
    - t_dict

  shardingAlgorithms:
    alg_inline_userid:
      type: INLINE
      props:
        algorithm-expression: server-order$-&gt;{user_id % 2}
    alg_mod:
      type: MOD
      props:
        sharding-count: 2
    alg_hash_mod:
      type: HASH_MOD
      props:
        sharding-count: 2
  
  keyGenerators:
    snowflake:
      type: SNOWFLAKE

</code></pre>
<h2><a id="2%E3%80%81%E5%AE%9E%E6%97%B6%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2、实时查看日志</h2>
<p>可以通过这种方式查看服务器中输出的SQL语句</p>
<pre class="line-numbers"><code class="language-shell">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash
tail -f /opt/shardingsphere-proxy/logs/stdout.log 
</code></pre>
<h2><a id="3%E3%80%81%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3、远程访问测试</h2>
<pre class="line-numbers"><code class="language-sql">mysql&gt; show databases;
mysql&gt; use sharding_db;
mysql&gt; show tables;
mysql&gt; select * from t_order; --测试水平分片
mysql&gt; select * from t_dict; --测试广播表
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL修改表名大小写敏感配置时，一定要注意这个问题]]></title>
    <link href="https://xixiang.tech/16768818963496.html"/>
    <updated>2023-02-20T16:31:36+08:00</updated>
    <id>https://xixiang.tech/16768818963496.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E6%9F%A5%E8%AF%A2%E8%A1%A8%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E8%AE%BE%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>查询表名大小写敏感设置</h2>
<pre class="line-numbers"><code class="language-plain_text"># 指定表名是否使用小写
show GLOBAL VARIABLES like 'lower_case_table_names';
</code></pre>
<p><code>1</code>表名全部转化为小写。<br />
<code>0</code>表名是严格区分大小写的，若查询时大小写弄混淆就会直接报错表不存在。</p>
<h2><a id="%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E5%89%8D%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>修改表名大小写敏感前注意事项</h2>
<p>严格区分大小写<code>0</code>改为<code>1</code>全部转为小写的时候，如果<code>表名</code>中<code>出现任意一个大写字母</code>，都需要将其改为小写之，之后再修改配置。<br />
否者<code>存在大写字母的表</code>会报<code>doesn't exist</code>的错误，导致系统无法正常运行。</p>
<pre class="line-numbers"><code class="language-SQL"># 查询所有包含大写字母的表
SELECT 
	TABLE_SCHEMA,
	TABLE_NAME
FROM 
	information_schema.`TABLES` 
WHERE table_type != 'SYSTEM VIEW' 
	AND TABLE_NAME REGEXP BINARY '[a-z]'

# 将大写表重命名为小写表 
RENAME table TEST to test;

# 若存在大写库 则需要先创建小写库 然后将大写库里面的表转移到小写库
RENAME table TESTDB.test_tb to testdb.test_tb;

# 拼接SQL 将大写库中的表转移到小写库
SELECT
	CONCAT( 'rename table TESTDB.', TABLE_NAME, ' to testdb.', TABLE_NAME, ';' ) 
FROM
	information_schema.TABLES 
WHERE
	TABLE_SCHEMA = 'TESTDB';

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[系统架构的发展过程]]></title>
    <link href="https://xixiang.tech/16762779297017.html"/>
    <updated>2023-02-13T16:45:29+08:00</updated>
    <id>https://xixiang.tech/16762779297017.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%BC%A0%E7%BB%9F%E6%9E%B6%E6%9E%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>传统架构</h2>
<h3><a id="%E5%8D%95%E4%B8%80%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>单一应用架构/单体架构</h3>
<p>当网站流量很小时，简单单体结构，只需一个应用，将所有功能都部署在一起，运行在一个服务器上，以减少部署节点和成本。数据访问框架(ORM)是关键。</p>
<ol>
<li>特点：
<ul>
<li>所有功能集成一个项目中</li>
<li>所有功能打一个包就能完成</li>
<li>应用与数据库分开部署</li>
<li>通过部署应用集群和数据集群来提供性能</li>
</ul>
</li>
<li>优势：
<ul>
<li>开发相当简单</li>
<li>部署单一应用程序是很简单，只需将打包的应用程序复制到服务器</li>
<li>横向扩展是很简单的。即：如果一台服务器不够用，则可以再部署一台全新的服务器，并且可以通过负载均衡器【例如Nginx】将负载分配到不同的服务器上。</li>
</ul>
</li>
<li>劣势：
<ul>
<li>复杂性高，大项目整个项目包含的模块多，模块边界模糊，依赖关系不清晰，代码质量参差不齐，混乱的堆砌在一起，整个项目非常复杂，每次修改代码都胆战心惊，有时候就是仅仅新增了一个简单的功能，或者就是修改一个bug都会带来隐含的缺陷。</li>
<li>灵活性，单一架构不够灵活。技术从一开始就决定了，并自始至终遵循。一旦开发成熟，有时就很难升级技术堆栈版本，更不用说增量地采用新技术了。</li>
<li>可靠性，不可靠。如果一个特性出现故障，整个应用程序可能会出现故障</li>
<li>开发速度，单一架构的大型项目开发缓慢，对于新的团队成员来说，理解和修改大型单一架构应用程序的代码是很困难的。代码质量会随着时间的推移而下降，应用程序越大，启动时间越长。</li>
<li>不利于升级维护：某一个模块出现问题，则导致整个项目整体部署。</li>
</ul>
</li>
</ol>
<h3><a id="%E5%9E%82%E7%9B%B4%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>垂直应用框架</h3>
<p>MVC模式、前后端分离模式、组件模式、类库模式、当业务规模较小时，把所有应用部署到同一个进程，通过双机或者前置负载均衡实现负载分流，或者大项目垂直拆分业务为一个个小项目，此时分离前后端是逻辑的MVC架构是关键。</p>
<ol>
<li>特点：
<ul>
<li>以单体架构的大规模项目，进行垂直划分项目，将大项目拆分成一个个单体结构项目</li>
<li>项目与项目之前的存在数据冗余，耦合性较大</li>
<li>项目之间的接口多为数据同步功能</li>
</ul>
</li>
<li>优点：
<ul>
<li>项目架构简单，前期开发成本低，周期短，小型项目的首选</li>
<li>通过垂直拆分，原来的单体项目不至于无限放大</li>
<li>不同的项目可以采用不同的技术</li>
</ul>
</li>
<li>缺点：
<ul>
<li>系统之间相互独立，有重复的开发任务</li>
<li>系统性能扩展只能通过扩展集群节点，成本高，有瓶颈</li>
</ul>
</li>
</ol>
<h2><a id="%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>分布式架构</h2>
<h3><a id="%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84soa%EF%BC%8Cservice-oriented-architecture" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>面向服务的体系结构(SOA，service-oriented architecture)</h3>
<p>垂直应用越来越多时，重复的代码量也会递增，所以出现了分布式架构，它将工程拆分为表现层和服务层两个部分，服务层中包含业务逻辑，表层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现，此时提升业务复用性和拆分是关键，RPC和MQ是SOA的两大基石。（RPC，Remote Procedure Call 远程过程调用）是一个计算机面向方法的通信协议。 该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。A计算机提供一个服务，B计算机同过参数传递的方式可以像调用本地服务那样调用A计算机的服务。</p>
<ol>
<li>特点:
<ul>
<li>该定义并不特指一种技术，而是一种分布式运算的软件设计方法。软件的部分组件（调用者），可以透过网络上的通用协议调用另一个应用软件组件运行、运作，让调用者获得服务。</li>
<li>基于SOA思想将重复、公共的功能抽取为组件，以服务方式给各个系统提供服务</li>
<li>各个项目（系统）与服务之间采用webService、RPC等方式通讯</li>
</ul>
</li>
<li>优点：
<ul>
<li>将重复、公共的功能抽取为服务，提高开发效率，提高系统的可复用性，可维护性</li>
<li>可以针对不同服务的特点指定集群及优化方案。</li>
<li>基于ESB/DUBBO减少系统耦合</li>
</ul>
</li>
<li>缺点：
<ul>
<li>系统与服务界限模糊，不利于开发和维护；</li>
<li>抽象服务的粒度过大，系统与服务之间耦合性高。</li>
</ul>
</li>
</ol>
<h3><a id="%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%88msa%EF%BC%8Cmicroservices-architecture%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>微服务架构（MSA，MicroServices Architecture）</h3>
<p>微服务架构和分布式SOA架构有一点类似，但是区别也很明显，SOA是面向服务的架构，从顶层的应用到底层的数据库设计都是基于应用来设计，但是微服务是将服务原子化，独立拆分成各个独立的系统。</p>
<ol>
<li>优点：
<ul>
<li>去中心化，通过服务的原子化拆分，以及微服务的独立打包、部署和升级，小团队的交付周期将缩短，运维成本也将大幅度下降；</li>
<li>微服务遵循单一原则。微服务之间采用Restful等轻量协议传输。</li>
<li>产品迭代周期更短，业务迭代快</li>
</ul>
</li>
<li>缺点：
<ul>
<li>微服务过多，服务治理成本高，不利于系统维护；</li>
<li>业务发展比较稳定其实并不建议使用微服务架构，通讯成本增加，架构复杂增加；</li>
<li>分布式系统开发的技术成本高（容错、分布式事务等），对团队挑战大。</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
</feed>
