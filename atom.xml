<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[油脂青年]]></title>
  <link href="https://penghuicai.github.io/atom.xml" rel="self"/>
  <link href="https://penghuicai.github.io/"/>
  <updated>2021-02-23T14:45:38+08:00</updated>
  <id>https://penghuicai.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[MySQL 索引使用情况统计 information_schema.INDEX_STATISTICS]]></title>
    <link href="https://penghuicai.github.io/16140620588310.html"/>
    <updated>2021-02-23T14:34:18+08:00</updated>
    <id>https://penghuicai.github.io/16140620588310.html</id>
    <content type="html"><![CDATA[
<p>MySQL的开源版本 MariaDB、Percona MySQL Server 和 AliSQL 5.6 版本支持统计索引的信息，即可以统计出使用某个索引扫描的行数。依照此，可以找出未被使用的，或者使用频率较低的索引，从而进行下线。</p>

<h2 id="toc_0">示例</h2>

<pre class="line-numbers"><code class="language-text">mysql&gt; select * from wstest.test2 where name=&#39;aaax&#39;;  
+----+------+--------+------+-------+  
| id | name | status | addr | addr2 |  
+----+------+--------+------+-------+  
|  5 | aaax |      5 |      |     0 |  
+----+------+--------+------+-------+  
1 row in set (0.00 sec)  
</code></pre>

<h2 id="toc_1">查看统计信息</h2>

<p>注意：最开始查询 information_schema.INDEX_STATISTICS 表发现结果为空时需要打开参数才会进行统计。<br/>
打开参数：<code>loose_rds_indexstat=1</code></p>

<pre class="line-numbers"><code class="language-text">mysql&gt; select * from information_schema.INDEX_STATISTICS where table_schema=&#39;wstest&#39; and table_name=&#39;test2&#39;;  
+--------------+------------+------------+-----------+  
| TABLE_SCHEMA | TABLE_NAME | INDEX_NAME | ROWS_READ |  
+--------------+------------+------------+-----------+  
| wstest       | test2      | idx_name   |         1 |  
| wstest       | test2      | PRIMARY    |   6314081 |  
+--------------+------------+------------+-----------+  
2 rows in set (0.02 sec)  
</code></pre>

<h2 id="toc_2">统计介绍</h2>

<p>由于在使用 idx_name查 询数据时，扫描行数为1所以在 information_schema.INDEX_STATISTICS 表的 ROWS_READ 字段对应的值为 1 ；<br/>
若再次使用 idx_name 查询，则 ROWS_READ 会再次加 1 。</p>

<h2 id="toc_3">索引下线</h2>

<h3 id="toc_4">设置索引不可见</h3>

<p>使索引不可见，避免突然下线导致某些应用出现慢查。</p>

<pre class="line-numbers"><code class="language-text">mysql&gt; alter table test2 alter index idx_name invisible;
</code></pre>

<h3 id="toc_5">删除索引</h3>

<p>设置索引不可见之后，可以过一段时间，选择低峰期将索引进行删除：</p>

<pre class="line-numbers"><code class="language-text">mysql &gt; alter table test2 drop index idx_name;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vuejs 脚手架 vue-cli 开始 Vuejs 项目]]></title>
    <link href="https://penghuicai.github.io/16068990354499.html"/>
    <updated>2020-12-02T16:50:35+08:00</updated>
    <id>https://penghuicai.github.io/16068990354499.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-shell">$ sudo npm install -g vue-cli

❯ Yes, use Yarn  

$ vue list 

$ vue init webpack wlt-demo
# ? Project name wlt-demo
# ? Project description A Vue.js project
# ? Author kellen_cai@126.com
# ? Vue build standalone
# ? Install vue-router? Yes
# ? Use ESLint to lint your code? Yes
# ? Pick an ESLint preset Standard
# ? Set up unit tests No
# ? Setup e2e tests with Nightwatch? No
# ? Should we run `npm install` for you after the # project has been created? (recommended) yarn 

$ cd wlt-demo
# $ npm run dev
$ yarn run dev
# http://localhost:8080
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 允许任何来源 App 运行]]></title>
    <link href="https://penghuicai.github.io/16052597148068.html"/>
    <updated>2020-11-13T17:28:34+08:00</updated>
    <id>https://penghuicai.github.io/16052597148068.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">打开终端应用 执行下方命令，并按提示输入密码即可显示</h2>

<pre class="line-numbers"><code class="language-text"> sudo spctl --master-disable
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP POST 请求被浏览器强制转换为 GET 请求]]></title>
    <link href="https://penghuicai.github.io/16045635590464.html"/>
    <updated>2020-11-05T16:05:59+08:00</updated>
    <id>https://penghuicai.github.io/16045635590464.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">遇到这种情况，检查一下访问的 URL 是 HTTP 还是 HTTPS</h2>

<h2 id="toc_1">原因 Nginx 做 HTTP 重定向到 HTTPS ，POST 才变成 GET 请求</h2>

<ol>
<li>浏览器客户端发送 POST 请求，Nginx 返回 302 暂时性转移到 HTTPS</li>
<li>浏览器客户端收到 302 后，通过 HTTPS 向服务器发起新的请求</li>
<li>新的请求就变成了 GET 请求</li>
</ol>

<h2 id="toc_2">说明</h2>

<p>因为做了Nginx HTTP 重定向到 HTTPS，他们这种访问 API 的方式才出错的。<br/>
大多数 HTTP 浏览器客户端会将引起 302 的 POST 请求转化为 GET 请求发出去。<br/>
其实这是将 302 当做 303 来处理，至于为什么会将 302 当做 303 来处理，据说这是很多老服务器的期望行为，所以一切都是为了兼容性。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ImpEx 多表单行导出]]></title>
    <link href="https://penghuicai.github.io/16045412531522.html"/>
    <updated>2020-11-05T09:54:13+08:00</updated>
    <id>https://penghuicai.github.io/16045412531522.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-text">&quot;$query=select {pk} from {Consignment} where {code}=&#39;XS20062200002001&#39;&quot;
&quot;#% impex.setTargetFile(&quot;&quot;consignment.txt&quot;&quot;);&quot;
INSERT_UPDATE Consignment;code;consignmentExtend(orderApproveTimes)[alias=&#39;ConsignmentExtend.orderApproveTimes&#39;];consignmentExtend(isNoticeNewPosStatus(code))[alias=&#39;通知新POS状态&#39;];
&quot;#% impex.exportItemsFlexibleSearch(&quot;&quot;$query&quot;&quot;, Collections.EMPTY_MAP, Collections.singletonList( Item.class ), true, true, -1, -1);&quot;
</code></pre>

<p>ImpEx 导出 省市区</p>

<pre class="line-numbers"><code class="language-text">&quot;$query=select {pk} from {District}&quot;
&quot;#% impex.setTargetFile(&quot;&quot;District.txt&quot;&quot;);&quot;
INSERT_UPDATE District;code[alias=&#39;区县&#39;];name[lang=zh,alias=&#39;区县&#39;];city(code);city(name[lang=zh])[alias=&#39;市&#39;];city(region(isocode))[alias=&#39;省&#39;];city(region(name[lang=zh]))[alias=&#39;省&#39;];city(region(country(isocode)))[alias=&#39;国家&#39;];city(region(country(name[lang=zh])))[alias=&#39;国家&#39;];
&quot;#% impex.exportItemsFlexibleSearch(&quot;&quot;$query&quot;&quot;, Collections.EMPTY_MAP, Collections.singletonList( Item.class ), true, true, -1, -1);&quot;
</code></pre>

<p>导出</p>

<pre class="line-numbers"><code class="language-text">&quot;$query=select {c.pk} from {consignment as c} where {c.modifiedtime} &lt; &#39;2021-04-07 09:40:00&#39; AND {c.acceptedStatus} = 8796118745179 &quot;
&quot;#% impex.setTargetFile(&quot;&quot;consignment.txt&quot;&quot;);&quot;
INSERT_UPDATE Consignment;code;status(name[lang=zh])[alias=&#39;状态&#39;];occupyStatus(name[lang=zh])[alias=&#39;占货状态&#39;];acceptedStatus(name[lang=zh])[alias=&#39;接受状态&#39;];abnormalType(name[lang=zh])[alias=&#39;异常类型&#39;];abnormalStatus(name[lang=zh])[alias=&#39;异常状态&#39;];
&quot;#% impex.exportItemsFlexibleSearch(&quot;&quot;$query&quot;&quot;, Collections.EMPTY_MAP, Collections.singletonList( Item.class ), true, true, -1, -1);&quot;
</code></pre>

<h1 id="toc_0">ImpEx 多表单行导入</h1>

<pre class="line-numbers"><code class="language-text">INSERT_UPDATE Consignment;code[unique=true];approvedTimes;consignmentExtend(orderApproveTimes);consignmentExtend(isNoticeNewPosStatus(code));
;XS20062200002001;1;2;PENDING


INSERT_UPDATE Consignment;code[unique=true];approvedTimes;consignmentExtend(orderApproveTimes);
;XS20062200002001;1;2;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HYBRIS HMC 查询慢问题解决]]></title>
    <link href="https://penghuicai.github.io/16025586739645.html"/>
    <updated>2020-10-13T11:11:13+08:00</updated>
    <id>https://penghuicai.github.io/16025586739645.html</id>
    <content type="html"><![CDATA[
<p>hmc 字段加了索引，查询依旧很慢</p>

<h2 id="toc_0">快速解决</h2>

<pre class="line-numbers"><code class="language-text"># local.properties 
# 配置文件 新增字符串属性搜索不区分大小写配置为false
hmc.caseinsensitivestringsearch=false
</code></pre>

<h2 id="toc_1">原因</h2>

<p>当 <code>hmc.caseinsensitivestringsearch=true</code> 时，当拼接 SQL 语句里会自动拼接上忽略大小写的语法，非常影响查询效率。</p>

<h2 id="toc_2">补充说明</h2>

<ul>
<li>Mysql 默认的字符检索策略
<ul>
<li><code>utf8_general_ci</code> 表示不区分大小写，a 和 A 会在字符判断中会被当做一样的</li>
<li><code>utf8_general_cs</code> 表示区分大小写</li>
<li><code>utf8_bin</code> 表示二进制比较，同样也区分大小写</li>
</ul></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿里云 云中谁寄锦书来 免费领取Git命令超大鼠标垫]]></title>
    <link href="https://penghuicai.github.io/15983233728441.html"/>
    <updated>2020-08-25T10:42:52+08:00</updated>
    <id>https://penghuicai.github.io/15983233728441.html</id>
    <content type="html"><![CDATA[
<p><img src="https://ucc.alicdn.com/pic/developer-ecology/8b44a0f0b1ca4d24965809c71ad4463f.jpg" alt="云中谁寄锦书来"/></p>

<h2 id="toc_0">活动地址</h2>

<p><a href="https://developer.aliyun.com/adc/series/devops/">阿里云免费领取Git命令超大鼠标垫活动</a></p>

<h2 id="toc_1">活动时间</h2>

<p>2020.8.19 - 2020.8.28</p>

<h2 id="toc_2">活动奖品说明</h2>

<ol>
<li>目前参与人数少，基本必得奖品</li>
<li>奖品余额每日加200份，共2000份</li>
<li>每天上午10点更新奖品余额</li>
<li>先完成答题但没抢到奖品的用户次10点再来领取</li>
</ol>

<h2 id="toc_3">答题任务</h2>

<ol>
<li>单选选择<code>以上都是</code></li>
<li>多选就是<code>全选</code></li>
</ol>

<h2 id="toc_4">奖品图片</h2>

<p><img src="media/15983233728441/1.jpg" alt="git鼠标垫"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tower Mac 3.5.1 优秀版 Mac上优秀的Git客户端]]></title>
    <link href="https://penghuicai.github.io/15960791395279.html"/>
    <updated>2020-07-30T11:18:59+08:00</updated>
    <id>https://penghuicai.github.io/15960791395279.html</id>
    <content type="html"><![CDATA[
<p>版本：3.5.1</p>

<p>下载链接： <a href="https://n459.com/file/11804594-455602913">Tower_3.5.1.dmg</a></p>

<blockquote>
<p>资料来源 <a href="https://www.waitsun.com/tag/tower">麦氪派</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Navicat Premium Mac 15.0.3 优秀版 Mac上最强大的数据库客户端]]></title>
    <link href="https://penghuicai.github.io/15960155953523.html"/>
    <updated>2020-07-29T17:39:55+08:00</updated>
    <id>https://penghuicai.github.io/15960155953523.html</id>
    <content type="html"><![CDATA[
<p>版本：15.0.3</p>

<p>下载链接： <a href="https://n459.com/file/11804594-455602904">Navicat_Premium_15.0.3.dmg</a></p>

<blockquote>
<p>资料来源 <a href="https://www.waitsun.com/tag/navicat-premium">麦氪派</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis Desktop Manager 2020.0.79 redis可视化工具 桌面管理工具]]></title>
    <link href="https://penghuicai.github.io/15960109915590.html"/>
    <updated>2020-07-29T16:23:11+08:00</updated>
    <id>https://penghuicai.github.io/15960109915590.html</id>
    <content type="html"><![CDATA[
<p>版本：2020.0.79</p>

<p>下载链接： <a href="https://n459.com/file/11804594-455498807">Redis_Desktop_Manager_2020.0.79.dmg</a></p>

<blockquote>
<p>资源来源 <a href="https://macstore.info/a/Redis-Desktop-Manager-for-mac.html">麦克苹果商店</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZOC Terminal 7.24.5 序列号版 最好用的终端仿真器]]></title>
    <link href="https://penghuicai.github.io/15960037317603.html"/>
    <updated>2020-07-29T14:22:11+08:00</updated>
    <id>https://penghuicai.github.io/15960037317603.html</id>
    <content type="html"><![CDATA[
<p>版本：7.24.5</p>

<p>下载链接 <a href="https://n459.com/file/11804594-455489783">ZOC_Terminal_7.24.5.dmg</a></p>

<pre class="line-numbers"><code class="language-text"># the first sn-part:
51698/01027/34713

# and the second sn part being:
00937
</code></pre>

<blockquote>
<p>资源来源 <a href="https://www.waitsun.com/serial/zoc">麦氪派</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正在运行中的脚本进程 npm run build Killed]]></title>
    <link href="https://penghuicai.github.io/15952988486812.html"/>
    <updated>2020-07-21T10:34:08+08:00</updated>
    <id>https://penghuicai.github.io/15952988486812.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">一、错误解释</a>
</li>
<li>
<a href="#toc_1">二、创建交换区原则</a>
<ul>
<li>
<a href="#toc_2">1. 创建的 swap 交换区容量创建原则</a>
</li>
<li>
<a href="#toc_3">2. 内存 IO 请求频繁创建原则</a>
</li>
<li>
<a href="#toc_4">3. 硬盘设备选择创建原则</a>
</li>
</ul>
</li>
<li>
<a href="#toc_5">三、创建步骤</a>
<ul>
<li>
<a href="#toc_6">1. 创建 swap 交换区硬盘存储空白文件</a>
</li>
<li>
<a href="#toc_7">2. 格式化文件为 swap 文件系统</a>
</li>
<li>
<a href="#toc_8">3. 启用 swap 文件交换区</a>
</li>
<li>
<a href="#toc_9">4. 设置开机启用</a>
</li>
<li>
<a href="#toc_10">5. 查看 swap 交换区</a>
</li>
<li>
<a href="#toc_11">6. 调整 swap 文件交换区大小或删除</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">一、错误解释</h2>

<blockquote>
<p>运行 npm run build 的时候需要使用很多内存（我们编译需要 8G 左右，系统物理内存只有 4G ），内存不足编译进程就会被系统 kill 。</p>

<p>当服务器的总是内存不足，时常会因为内存不足而引发服务被强制 kill 掉进程的话，在不增加物理内存的情况下，启用 swap 交换区作为虚拟内存是一个不错的选择。</p>
</blockquote>

<h2 id="toc_1">二、创建交换区原则</h2>

<h3 id="toc_2">1. 创建的 swap 交换区容量创建原则</h3>

<blockquote>
<p>交换区大小应该大于实际物理内存的容量大小，但是不要过大，以免造成硬盘空间浪费。通常创建物理内存 <code>2~2.5</code> 倍大小的文件作为交换区。</p>
</blockquote>

<h3 id="toc_3">2. 内存 IO 请求频繁创建原则</h3>

<blockquote>
<p>单一 swap 交换区 IO 队列等待时间过长的话，可以多创建几个 swap 交换区。</p>
</blockquote>

<h3 id="toc_4">3. 硬盘设备选择创建原则</h3>

<blockquote>
<p>优先在 IO 速度最快的硬盘设备上创建。</p>
</blockquote>

<h2 id="toc_5">三、创建步骤</h2>

<h3 id="toc_6">1. 创建 swap 交换区硬盘存储空白文件</h3>

<pre class="line-numbers"><code class="language-text"># $ free -h 
# root 账号 
# 创建一个 8G 的 swap 交换区空白文件
$ dd if=/dev/zero of=/swap bs=1M count=8192
# 运行之后 需要等一会儿 才会成功
</code></pre>

<h3 id="toc_7">2. 格式化文件为 swap 文件系统</h3>

<pre class="line-numbers"><code class="language-text"># root 账号
# -f 使用文件作为 swap 交换区
$ mkswap -f /swap
</code></pre>

<h3 id="toc_8">3. 启用 swap 文件交换区</h3>

<pre class="line-numbers"><code class="language-text">$ swapon /swap
# $ free -h
</code></pre>

<h3 id="toc_9">4. 设置开机启用</h3>

<pre class="line-numbers"><code class="language-text"># 修改/etc/fstab，增加一行
$ vi /etc/fstab
 # i键 进入编辑模式
 # 加入下面这一行
 /swap swap swap defaults 0 0
 # exit键 退出编辑
 # :wq 保存文件并退出vi
</code></pre>

<h3 id="toc_10">5. 查看 swap 交换区</h3>

<pre class="line-numbers"><code class="language-text">$ swapon --show
</code></pre>

<h3 id="toc_11">6. 调整 swap 文件交换区大小或删除</h3>

<pre class="line-numbers"><code class="language-text"># 关闭 swap 
$ swapoff /swap
# $ free -h 
# 删除 swap 文件
$ rm -rf  /swap
# 如需要调整 swap 交换区大小，删除之后 重新创建即可
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打包报错 打包时候UglifyJs压缩的问题]]></title>
    <link href="https://penghuicai.github.io/15935967757482.html"/>
    <updated>2020-07-01T17:46:15+08:00</updated>
    <id>https://penghuicai.github.io/15935967757482.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">报错内容</a>
</li>
<li>
<a href="#toc_1">报错原因</a>
<ul>
<li>
<a href="#toc_2">我遇到的问题1</a>
</li>
</ul>
</li>
<li>
<a href="#toc_3">解决办法</a>
<ul>
<li>
<a href="#toc_4">roadhog</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">报错内容</h2>

<pre class="line-numbers"><code class="language-text">Failed to compile. 133.a17a298b.async.js from UglifyJs 
# 问题1
Unexpected token: operator (&gt;) [133.a17a298b.async.js:51671,24] 

# 问题2
from UglifyJs Unexpected token: keyword (const)

# 问题3
from UglifyJs Unexpected token: punc ())
</code></pre>

<h2 id="toc_1">报错原因</h2>

<p>压缩工具 uglify 只支持 es5 的语法。<br/>
当遇到 const、let、()=&gt; 类似的语法将跑出上面异常</p>

<h3 id="toc_2">我遇到的问题1</h3>

<p>@ant-design/charts 依赖的 d3-regression 使用了 es6 语法。<br/>
但是现在使用的 roadhog，压缩工具 uglify-js 不支持 es6 语法， 所以 build 打包报错了</p>

<h2 id="toc_3">解决办法</h2>

<h3 id="toc_4">roadhog</h3>

<pre class="line-numbers"><code class="language-text">#.roadhogrc.js 文件 加入下面内容
export default {
    &quot;extraBabelIncludes:&quot; [
        &quot;node_modules/d3-regression&quot;,
        &quot;node_modules/xxxx&quot;
    ]
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT 仓库迁移并保留分支和历史提交]]></title>
    <link href="https://penghuicai.github.io/15905697716646.html"/>
    <updated>2020-05-27T16:56:11+08:00</updated>
    <id>https://penghuicai.github.io/15905697716646.html</id>
    <content type="html"><![CDATA[
<blockquote>
</li>
<li>
<a href="#toc_1">进入本地 clone 的旧库目录</a>
</li>
<li>
<a href="#toc_2">移除旧库的地址替换成新库地址</a>
</li>
<li>
<a href="#toc_3">将新地址镜像 core 直接推到远程新库</a>
</li>
<li>
<a href="#toc_4">删除本地库 core，然后再重新拉取</a>
</li>
<li>
<a href="#toc_5">已搞定</a>
</li>
</ul>


<h2 id="toc_0">clone 旧库的镜像</h2>
</blockquote>

<pre class="line-numbers"><code class="language-text">git clone --mirror https://xxx.com/old/core.git
</code></pre>

<h2 id="toc_1">进入本地 clone 的旧库目录</h2>

<pre class="line-numbers"><code class="language-text">cd core.git
</code></pre>

<h2 id="toc_2">移除旧库的地址替换成新库地址</h2>

<pre class="line-numbers"><code class="language-text">git remote set-url --push origin https://xxx.com/new/core.git
</code></pre>

<h2 id="toc_3">将新地址镜像 core 直接推到远程新库</h2>

<pre class="line-numbers"><code class="language-text">git push --mirror
</code></pre>

<h2 id="toc_4">删除本地库 core，然后再重新拉取</h2>

<pre class="line-numbers"><code class="language-text">rm -rf core.git

git clone -b prod https://xxx.com/new/core.git
</code></pre>

<h2 id="toc_5">已搞定</h2>

<pre class="line-numbers"><code class="language-text">git clone --mirror old.git

cd old.git

git remote set-url --push origin new.git

这一步的时候，可以删除不需要的分支和版本

git push --mirror
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT 分支管理推荐]]></title>
    <link href="https://penghuicai.github.io/15898582058753.html"/>
    <updated>2020-05-19T11:16:45+08:00</updated>
    <id>https://penghuicai.github.io/15898582058753.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">创建 新功能 分支</a>
<ul>
<li>
<a href="#toc_1">创建条件</a>
</li>
<li>
<a href="#toc_2">命名规则</a>
</li>
<li>
<a href="#toc_3">生命周期</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">创建 bug修复 分支</a>
<ul>
<li>
<a href="#toc_5">创建条件</a>
</li>
<li>
<a href="#toc_6">命名规则</a>
</li>
<li>
<a href="#toc_7">生命周期</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">创建 新功能 分支</h2>

<h3 id="toc_1">创建条件</h3>

<pre class="line-numbers"><code class="language-text">基于对应的 master(prod) 分支开发某个 新功能点 时创建
</code></pre>

<h3 id="toc_2">命名规则</h3>

<pre class="line-numbers"><code class="language-text">feature/authorName-createTime-functionalDescription
例1（无项目管理系统）：feature/xm-20190313-createOrder
例2（有项目管理系统）：feature/xm-20190313-taskid
</code></pre>

<h3 id="toc_3">生命周期</h3>

<ul>
<li><p>开发前：</p>
<pre class="line-numbers"><code class="language-text">从 master(prod) 分支创建 feature/xxx 分支完成开发任务
</code></pre></li>
<li><p>开发后：</p>
<pre class="line-numbers"><code class="language-text">合并 feature/xxx 分支到 develop(develop/global) 分支进行功能测试
</code></pre></li>
<li><p>功能测试后：</p>
<pre class="line-numbers"><code class="language-text">合并 feature/xxx 分支至 staging(release)  进行业务流程验收测试
</code></pre></li>
<li><p>验收测试后：</p>
<pre class="line-numbers"><code class="language-text">合并 feature/xxx 分支至 master(prod)，等待部署上线
</code></pre></li>
<li><p>上线完成：</p>
<pre class="line-numbers"><code class="language-text">观察一段时间，删除 feature/xxx 分支
</code></pre></li>
</ul>

<h2 id="toc_4">创建 bug修复 分支</h2>

<h3 id="toc_5">创建条件</h3>

<pre class="line-numbers"><code class="language-text">基于对应的 master(prod) 分支修复某个 Bug 时创建
</code></pre>

<h3 id="toc_6">命名规则</h3>

<pre class="line-numbers"><code class="language-text">bugfix/authorName-createTime-functionalDescription
例1（无项目管理系统）：bugfix/xm-20190313-saveOrderException
例2（有项目管理系统）：bugfix/xm-20190313-taskid
</code></pre>

<h3 id="toc_7">生命周期</h3>

<ul>
<li><p>修复前：</p>
<pre class="line-numbers"><code class="language-text">创建 bugfix/xxx 分支完成 bug 修补任务
</code></pre></li>
<li><p>修复后：</p>
<pre class="line-numbers"><code class="language-text">合并 bugfix/xxx 分支到 develop 分支进行功能测试
</code></pre></li>
<li><p>功能测试后：</p>
<pre class="line-numbers"><code class="language-text">合并 bugfix/xxx 分支至 staging(release)  进行业务流程验收测试
</code></pre></li>
<li><p>验收测试后：</p>
<pre class="line-numbers"><code class="language-text">合并 bugfix/xxx 分支至 master(prod)，等待部署上线
</code></pre></li>
<li><p>上线完成：</p>
<pre class="line-numbers"><code class="language-text">观察一段时间，删除  bugfix/xxx 分支
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[error reading property field]]></title>
    <link href="https://penghuicai.github.io/15894485026978.html"/>
    <updated>2020-05-14T17:28:22+08:00</updated>
    <id>https://penghuicai.github.io/15894485026978.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-text">error reading property field &#39;attributeCode&#39;/&#39;p_attributeCode&#39; of item &#39;8951708354515&#39;/&#39;8951708354515&#39; (info was [attributeCode,p_attributeCode,class de.hybris.platform.util.Itemxxxxxxxx
xxxxxxxx
xxxxxxxx
xxxxxxxx
Caused by: de.hybris.platform.persistence.hjmp.HJMPException: java.sql.SQLException: Column &#39;p_attributeCode&#39; not found.
</code></pre>

<ul>
<li>
<a href="#toc_0">快速解决</a>
</li>
<li>
<a href="#toc_1">问题步骤</a>
<ul>
<li>
<a href="#toc_2">1. 获取 itemType 类型的 pk</a>
</li>
<li>
<a href="#toc_3">2. 根据类型 PK 获取 ItemType Code</a>
</li>
<li>
<a href="#toc_4">3. 根据 Code 获取报错的那条数据</a>
</li>
<li>
<a href="#toc_5">4. 确认 item.xml 是否移除 移除边删除这条数据</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">快速解决</h2>

<pre class="line-numbers"><code class="language-text"># 查询是否存在，确认item.xml是否移除该属性的定义，删除这条数据
SELECT * FROM {AttributeDescriptor} WHERE {pk} = &#39;8951708354515&#39;

REMOVE AttributeDescriptor[batchmode=false];pk[unique=true]
;8951708354515
</code></pre>

<h2 id="toc_1">问题步骤</h2>

<h3 id="toc_2">1. 获取 itemType 类型的 pk</h3>

<pre class="line-numbers"><code class="language-text">SELECT {itemtype} FROM {Item} WHERE {pk} = &#39;8951708354515&#39;
</code></pre>

<h3 id="toc_3">2. 根据类型 PK 获取 ItemType Code</h3>

<pre class="line-numbers"><code class="language-text">SELECT {code} FROM {ComposedType} WHERE {pk} = &#39;8796107276370&#39;
</code></pre>

<h3 id="toc_4">3. 根据 Code 获取报错的那条数据</h3>

<pre class="line-numbers"><code class="language-text">SELECT * FROM {AttributeDescriptor} WHERE {pk} = &#39;8951708354515&#39;
</code></pre>

<h3 id="toc_5">4. 确认 item.xml 是否移除 移除边删除这条数据</h3>

<pre class="line-numbers"><code class="language-text">REMOVE AttributeDescriptor[batchmode=false];pk[unique=true]
;8951708354515
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT 服务器搭建（GOGS）]]></title>
    <link href="https://penghuicai.github.io/15891852674965.html"/>
    <updated>2020-05-11T16:21:07+08:00</updated>
    <id>https://penghuicai.github.io/15891852674965.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">脚本在底部</a>
</li>
<li>
<a href="#toc_1">GOGS 安装</a>
</li>
<li>
<a href="#toc_2">GOGS 配置</a>
<ul>
<li>
<a href="#toc_3">1、数据库设置</a>
</li>
<li>
<a href="#toc_4">2、应用基本设置</a>
</li>
<li>
<a href="#toc_5">3、选择设置</a>
</li>
<li>
<a href="#toc_6">4、立即安装</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">GOGS 启动、停止、重启脚本</a>
</li>
<li>
<a href="#toc_8">GOGS安装脚本</a>
</li>
<li>
<a href="#toc_9">GOGS启动脚本</a>
</li>
</ul>


<h2 id="toc_0">脚本在底部</h2>

<h2 id="toc_1">GOGS 安装</h2>

<p><img src="media/15891852674965/2.png" alt="安装"/></p>

<h2 id="toc_2">GOGS 配置</h2>

<h3 id="toc_3">1、数据库设置</h3>

<blockquote>
<p>修改数据库类型为: <mark>SQLite3</mark><br/>
数据库文件路径: <mark>/home/git/gogs-data/gogs.db</mark></p>
</blockquote>

<h3 id="toc_4">2、应用基本设置</h3>

<blockquote>
<p>应用名称为: <mark>XXXGIT</mark><br/>
仓库根目录: <mark>/home/git/gogs-repositories</mark><br/>
运行系统用户: <mark>git</mark><br/>
域名: <mark>host_ip</mark> （<em>服务器 ip 地址/域名 如：10.1.255.156</em>）<br/>
SSH 端口号: <mark>22</mark><br/>
HTTP 端口号: <mark>3000</mark>（<em>3000</em>）<br/>
应用 URL: <mark>http://host_ip:3000</mark>（<em>服务器 ip:80 地址/域名 如：<a href="http://10.1.255.156:3000">http://10.1.255.156:3000</a></em>）<br/>
日志路径: <mark>/home/git/gogs-log</mark></p>
</blockquote>

<h3 id="toc_5">3、选择设置</h3>

<blockquote>
<p>管理员帐号设置<br/>
管理员用户名: <mark>gogsadmin</mark><br/>
管理员密码: <mark>123456</mark><br/>
确认密码: <mark>同上</mark><br/>
管理员邮箱: <mark><a href="mailto:kellen.cai@126.com">kellen.cai@126.com</a></mark></p>
</blockquote>

<h3 id="toc_6">4、立即安装</h3>

<blockquote>
<p>点击【立即安装】按钮即可</p>
</blockquote>

<h2 id="toc_7">GOGS 启动、停止、重启脚本</h2>

<p><code>shell脚本在底部</code><br/>
<img src="media/15891852674965/3.png" alt="shell脚本在底部"/></p>

<h2 id="toc_8">GOGS安装脚本</h2>

<pre class="line-numbers"><code class="language-text">#!/usr/bin/env bash
set -e
# Root执行 CentOS7
sleep 1s
if ! type wget &gt;/dev/null 2&gt;&amp;1; then
    echo &quot;################ wget 开始安装&quot;
    yum install -y wget
    echo &quot;################ wget 安装完成&quot;
fi
sleep 1s
if ! type git &gt;/dev/null 2&gt;&amp;1; then
    echo &quot;################ git 开始安装&quot;
    yum install -y git
    echo &quot;################ git 安装完成&quot;
fi
sleep 1s
# 创建用户
user=git
group=git
if ! egrep &quot;^$group&quot; /etc/group &gt;/dev/null 2&gt;&amp;1;
then
    echo &quot; 创建 git 用户组&quot;
    groupadd $group
fi

#create user if not exists
if ! egrep &quot;^$user&quot; /etc/passwd  &gt;/dev/null 2&gt;&amp;1;then
    echo &quot;################ 创建 git 用户&quot;
    useradd -g $group $user
    echo &quot;################ 创建用户完成&quot;
fi

echo &quot;################ 创建应用文件夹 /opt&quot;
mkdir -p /opt
mkdir -p /home/git

sleep 1s
TIME=$(date &quot;+%Y%m%d%H%M&quot;)
echo &quot;################ 下载 gogs 二进制文件&quot;
if [ ! -f &quot;/opt/gogs.tar.gz&quot; ];then
    echo &quot;################ gogs.tar.gz 文件不存在&quot;
    sleep 1s
    echo &quot;################ 开始下载&quot;
    wget -O /opt/gogs.tar.gz https://github.com/gogs/gogs/releases/download/v0.11.53/linux_amd64.tar.gz
    echo &quot;################ 下载完成&quot;
else
    echo &quot;################ gogs.tar.gz 文件已存在&quot;
    echo &quot;################ 重命名 gogs.tar.gz 为 gogs.$TIME.tar.gz&quot;
    mv /opt/gogs.tar.gz /opt/gogs.$TIME.tar.gz
    sleep 1s
    echo &quot;################ 开始下载&quot;
    wget -O /opt/gogs.tar.gz https://github.com/gogs/gogs/releases/download/v0.11.53/linux_amd64.tar.gz
    echo &quot;################ 下载完成&quot;
fi

sleep 1s
echo &quot;################ 解压 gogs.tar.gz&quot;
rm -rf /opt/gogs/
tar -xzf /opt/gogs.tar.gz  -C /opt
mkdir -p /opt/gogs/custom/conf/

sudo chown -R git:git /opt
sudo chown -R git:git /home/git

iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3000

# 清空nat表PREROUTING链
# iptables -t nat -F PREROUTING

sleep 1s
PID=$(ps -ef | grep gogs | grep -v grep | awk &#39;{print $2}&#39;)

if [[ ! $PID ]]; then
    echo &quot;################ 检测 gogs 服务未启动&quot;
else
    echo &quot;################ 检测 gogs 服务启动中 PID=${PID}&quot;
    sudo kill -9 ${PID}
    echo &quot;################ 已停止 gogs 服务&quot;
fi

sleep 1s
echo &quot;################ 开始启动 gogs 服务&quot;
sudo su - git -c &quot;cd /opt/gogs &amp;&amp; nohup ./gogs web &amp;&quot;

sleep 3s
PID2=$(ps -ef | grep gogs | grep -v grep | awk &#39;{print $2}&#39;)
HOST_IP=`ip a |grep eth0 | grep inet | grep -v inet6 | grep -v 127 | sed &#39;s/^[ \t]*//g&#39; | cut -d &#39; &#39; -f2 | cut -d / -f 1`
echo &quot;PID = $PID2&quot;
if [[ ! $PID2 ]]; then
    echo -e &quot;\033[31m gogs 服务启动失败！请尝试重新启动\033[0m&quot;
else
    echo &quot;#######################################################################&quot;
    echo &quot;                                启动成功                                &quot;
    #echo &quot;            gogs 内置端口 3000 iptable 配置 80 转发 3000          &quot;
    echo &quot;           请在浏览器中打开 http://${HOST_IP}:80 进行设置             &quot;
    echo &quot;#######################################################################&quot;
fi
</code></pre>

<h2 id="toc_9">GOGS启动脚本</h2>

<pre class="line-numbers"><code class="language-text">#!/usr/bin/env bash
set -e

PID=$(ps -ef | grep gogs | grep -v grep | awk &#39;{print $2}&#39;)
MODE=$1
case &quot;${MODE}&quot; in
    stop)
        if [[ ! $PID ]]; then
          echo &quot;检测gogs服务未启动&quot;
        else
          sudo kill -9 ${PID}
          echo &quot;已停止gogs服务&quot;
        fi
    ;;
    restart)
        if [[ ! $PID ]]; then
          echo &quot;检测gogs服务未启动，启动gogs服务&quot;
        else
          sudo kill -9 ${PID}
          echo &quot;已停止gogs服务&quot;
        fi
        sudo su - git -c &quot;cd /opt/gogs &amp;&amp; nohup ./gogs web &amp;&quot;
        PID=$(ps -ef | grep gogs | grep -v grep | awk &#39;{print $2}&#39;)
        echo &quot;gogs服务启动成功PID=${PID}&quot;
    ;;
    start)
        if [[ ! $PID ]]; then
          echo &quot;检测gogs服务未启动，启动gogs服务&quot;
        else
          sudo kill -9 ${PID}
          echo &quot;已停止gogs服务&quot;
        fi
        sudo su - git -c &quot;cd /opt/gogs &amp;&amp; nohup ./gogs web &amp;&quot;
        PID=$(ps -ef | grep gogs | grep -v grep | awk &#39;{print $2}&#39;)
        echo &quot;gogs服务启动成功PID=${PID}&quot;
    ;;
    *)
        echo $&quot;please input right command (start,stop,restart) !&quot;
    ;;
esac
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[订单下同时存在发货和取消的配货单]]></title>
    <link href="https://penghuicai.github.io/15891841805966.html"/>
    <updated>2020-05-11T16:03:00+08:00</updated>
    <id>https://penghuicai.github.io/15891841805966.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-text">SELECT DISTINCT({o.ecsOrderId}) FROM {
Consignment AS c
JOIN ConsignmentStatus AS cs ON {cs.pk} = {c.status}
JOIN Order! AS o ON {o.pk} = {c.order}
} 
WHERE EXISTS({{
    select {c.order} from {
    Consignment 
    join ConsignmentStatus on {ConsignmentStatus.pk} = {Consignment.status} 
    join BaseStore on {BaseStore.pk} = {Consignment.baseStore} 
    join ChannelType on {ChannelType.pk} = {BaseStore.channelType}
    }
    where {ConsignmentStatus.code} = &#39;SHIPPED&#39; and {ChannelType.code} != &#39;EC&#39; and {c.order} = {Consignment.order}
}})
AND {cs.code} = &#39;TRADE_CLOSE&#39;
AND {c.orderCreationDate} &gt;= &#39;2020-04-12 00:00:00&#39;
AND {c.orderCreationDate} &lt; &#39;2020-05-12 00:00:00&#39;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 查看日志文件常用命令集合]]></title>
    <link href="https://penghuicai.github.io/15888326579314.html"/>
    <updated>2020-05-07T14:24:17+08:00</updated>
    <id>https://penghuicai.github.io/15888326579314.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">tail</a>
</li>
<li>
<a href="#toc_1">less</a>
</li>
<li>
<a href="#toc_2">cat + grep 组合</a>
</li>
</ul>


<h2 id="toc_0">tail</h2>

<p>tail 命令可用于查看文件的内容，它有一个常用的参数 -f 常用于查看正在改变的日志文件。</p>

<ul>
<li><p>命令格式</p>
<pre class="line-numbers"><code class="language-shell">tail [参数] [文件名]
</code></pre></li>
<li><p>无参：显示尾部 10 行内容</p>
<pre class="line-numbers"><code class="language-shell">tail console.log
</code></pre></li>
<li><p>循环读取日志文件，显示文件尾部 10 行内容并一直加载新的内容(Ctrl+C组合件结束加载)</p>
<pre class="line-numbers"><code class="language-shell">tail -f console.log
</code></pre></li>
<li><p>读取日志文件尾部 20 行内容</p>
<pre class="line-numbers"><code class="language-shell">tail -n 20 console.log
</code></pre></li>
<li><p>读取日志文件尾部 10 个字节内容</p>
<pre class="line-numbers"><code class="language-shell">tail -c 10 console.log
</code></pre></li>
</ul>

<p>注意</p>

<pre class="line-numbers"><code class="language-text">1. 以上命令，不设置具体值，默认尾部 10 行
2. 数字前可以使用 - 符号，默认 - 从文件尾部开始往上 n 行/字节
3. 相反，数字前也可以使用 + 符号，+ 表示除去文件头部 n 行、字节之外到文件尾部的文件内容显示
</code></pre>

<h2 id="toc_1">less</h2>

<p>less 命令可随意查看整个文件内容，主要用于大文件查找。以一页（屏幕范围）一页的显示方便使用者逐页阅读，而且 less 在查看之前不会加载整个文件。</p>

<ul>
<li><p>命令格式</p>
<pre class="line-numbers"><code class="language-shell">less [参数] 文件名
</code></pre></li>
<li><p>查看文件，文件头部开始展示一屏幕范围内容</p>
<pre class="line-numbers"><code class="language-shell">less console.log
</code></pre></li>
<li><p>显示行号查看文件，文件头部开始展示一屏幕范围内容</p>
<pre class="line-numbers"><code class="language-shell">less -N console.log
</code></pre></li>
<li><p>查看文件，搜索指令时忽略大小写</p>
<pre class="line-numbers"><code class="language-shell">less -i console.log
</code></pre></li>
<li><p>搜索指令，向下搜索“字符串”，n 查看下一个，N 查看上一个</p>
<pre class="line-numbers"><code class="language-shell">/字符串
</code></pre></li>
<li><p>搜索指令，向上搜索“字符串”，n 查看下一个，N 查看上一个</p>
<pre class="line-numbers"><code class="language-shell">?字符串
</code></pre></li>
<li><p>搜索指令，仅显示匹配“字符串”的行</p>
<pre class="line-numbers"><code class="language-shell">&amp;字符串
</code></pre></li>
<li><p>滚动指令，向上一行</p>
<pre class="line-numbers"><code class="language-shell">键盘上键:⬆️
</code></pre></li>
<li><p>滚动指令，向下一行</p>
<pre class="line-numbers"><code class="language-shell">键盘下键:⬇️
</code></pre></li>
<li><p>滚动指令，向下滚动一屏幕</p>
<pre class="line-numbers"><code class="language-shell">键盘空格键
</code></pre></li>
<li><p>滚动命令，向上滚动一屏幕</p>
<pre class="line-numbers"><code class="language-shell">b
</code></pre></li>
<li><p>滚动命令，滚动到头部</p>
<pre class="line-numbers"><code class="language-shell">g
</code></pre></li>
<li><p>滚动命令，滚动到尾部</p>
<pre class="line-numbers"><code class="language-shell">G
</code></pre></li>
<li><p>退出less模式</p>
<pre class="line-numbers"><code class="language-shell">q
</code></pre></li>
</ul>

<h2 id="toc_2">cat + grep 组合</h2>

<p>cat + grep 组合可以根据条件检索出符合条件的行并把它们打印的另一个文件中，便于查看。</p>

<ul>
<li><p>命令格式</p>
<pre class="line-numbers"><code class="language-shell"># 1. 将检索结果在屏幕上显示
cat [源文件名] | grep [参数] [参数] &quot;条件&quot;<br/>
# ======================================<br/>
# 2. 将检索结果打印到目标文件中<br/>
cat [源文件名] | grep [参数] [参数] &quot;条件&quot; &gt; [目标文件名]
</code></pre></li>
<li><p>示例</p>
<pre class="line-numbers"><code class="language-shell"># 检索 /logs/console-20190426.log 文件中包含字符串&quot;ERROR&quot;的行，并把这些行打印的20190426-error.log文件中。
cat /logs/console-20190426.log | grep -A 0 &quot;ERROR&quot; &gt; 20190426-error.log
</code></pre></li>
<li><p>显示包括字符串的行及下面的 1 行记录</p>
<pre class="line-numbers"><code class="language-shell"># 1. 将检索结果在屏幕上显示
cat [源文件名] | grep -A 1 &quot;条件&quot;<br/>
# ======================================<br/>
# 2. 将检索多个“或”检索条件结果打印在屏幕上显示<br/>
cat [源文件名] | grep -E &quot;条件1|条件2&quot;<br/>
# ======================================<br/>
# 3. 将检索多个“并”检索条件结果打印在屏幕上显示<br/>
cat [源文件名] | grep &quot;条件1&quot; | grep &quot;条件2&quot;<br/>
# ======================================<br/>
# 4. 将检索多个“或”+“并”检索条件结果打印在屏幕上显示<br/>
cat [源文件名] | grep -E &quot;条件1|条件2&quot; | grep &quot;条件3&quot;<br/>
# ======================================<br/>
# 3. 将检索结果打印到目标文件中<br/>
cat [源文件名] | grep -A 1 &quot;条件&quot; &gt; [目标文件名]
</code></pre></li>
<li><p>显示包括字符串的行及上面的 5 行记录</p>
<pre class="line-numbers"><code class="language-shell"># 1. 将检索结果在屏幕上显示
cat [源文件名] | grep -B 5 &quot;条件&quot;<br/>
# ======================================<br/>
# 2. 将检索结果打印到目标文件中<br/>
cat [源文件名] | grep -B 5 &quot;条件&quot; &gt; [目标文件名]
</code></pre></li>
<li><p>显示包括字符串的行及上面的 10 行和下面 10 行</p>
<pre class="line-numbers"><code class="language-shell"># 1. 将检索结果在屏幕上显示
cat [源文件名] | grep -C 10 &quot;条件&quot;<br/>
# ======================================<br/>
# 2. 将检索结果打印到目标文件中<br/>
cat [源文件名] | grep -C 10 &quot;条件&quot; &gt; [目标文件名]
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LoadRunner 常用语法]]></title>
    <link href="https://penghuicai.github.io/15675650161144.html"/>
    <updated>2019-09-04T10:43:36+08:00</updated>
    <id>https://penghuicai.github.io/15675650161144.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-java">// 定义数组时一定要指明大小
// 变量定义一定要放在所以操作之前，放在脚本最前面 
int num ; // 定义数值变量
int numArray[5]; // 定义整型数组
char *str1,*str2,*str3; // 定义字符串变量
char strArray[10],fileName[5],data[10]; // 定义字符串数组
</code></pre>

<pre class="line-numbers"><code class="language-java">// 数值赋值
num = 10;
// 输出非字符串
lr_output_message(&quot;%d&quot;, num)
// 字符串变量赋值
str1 = &quot;string1&quot;;
str2 = &quot;string2&quot;;
lr_output_message(str1);
// 拼接字符串
sprintf(strArray, &quot;%s+%s&quot;, str1, str2);
lr_output_message(strArray);
// 变量赋值给字符串数组
strcpy(strArray,&quot;字符串赋值给数组变量stry:String&quot;);
lr_output_message(strArray);
</code></pre>

<pre class="line-numbers"><code class="language-java">// 参数

// 参数赋值（左边给右边赋值）
// 左边值赋值给右边的参数
lr_save_string(&quot;parameterString&quot;, &quot;parameter1&quot;);
lr_output_message(lr_eval_string(&quot;{parameter1}&quot;));
// 左边变量的值赋值给参数
lr_save_string(strArray,&quot;parameter2&quot;);
lr_output_message(lr_eval_string(&quot;{parameter2}&quot;));
// 左边数值赋值给参数
lr_save_int(999,&quot;parameterNumber1&quot;);
lr_output_message(lr_eval_string(&quot;{parameterNumber1}&quot;));
lr_output_message(&quot;%d&quot;,num);
lr_save_int(num*2,&quot;parameterNumber2&quot;);
lr_output_message(&quot;%d&quot;,num);
lr_output_message(lr_eval_string(&quot;{parameterNumber2}&quot;));

// 参数取值
lr_eval_string(&quot;{parameter1}&quot;);
lr_eval_string(&quot;{parameterNumber1}&quot;);

// 参数转换为数组变量
strcpy(strArray,lr_eval_string(&quot;{parameter1}&quot;));
lr_output_message(&quot;%s&quot;,strArray);
// 参数转换为数值
num = atoi(lr_eval_string(&quot;{parameterNumber1}&quot;));
lr_output_message(&quot;%d&quot;,num);
</code></pre>

<pre class="line-numbers"><code class="language-java">// 时间 http://www.51testing.com/html/48/15163948-3713192.html
// 当前时间戳
web_save_timestamp_param(&quot;timestamp&quot;, LAST);
lr_output_message(&quot;时间戳:%s&quot;,lr_eval_string(&quot;{timestamp}&quot;));
// 格式化当前时间赋值给参数
lr_save_datetime(&quot;%Y%m%d%H%M%S&quot;, DATE_NOW, &quot;now&quot;);
lr_output_message(lr_eval_string(&quot;{now}&quot;))
// 时间的偏移量
DATE_NOW(现在的日期)
TIME_NOW(现在的时间)
ONE_DAY(一天的时间)
ONE_HOUR(一小时的时间)
ONE_MIN(一分钟的时间)
</code></pre>

<h1 id="toc_0">LoadRunner 参数类型</h1>

<h2 id="toc_1">Random Number（随机数）</h2>

<p>随机数，在属性设置中可以设置产生随机数的范围和更新值得时间。</p>

<h3 id="toc_2">Update value on（更新值得时间）</h3>

<h4 id="toc_3">Each occurrence（每次出现）</h4>

<p>每次出现该参数被调用就更新（取新的值），脚本中出现多次每次都更新值。</p>

<h4 id="toc_4">Each interaction（每次迭代）</h4>

<p>每次迭代时更新（取新的值），每次迭代不管多少个虚拟用户，都是迭代一次所有用户取相同的一个值。<br/>
例如：有10个虚拟用户，每个虚拟用户都取第1次生成的数，执行完成，称为一次迭代完成。然后10个虚拟用户都取第2次生成的数，完成第二次迭代，后面以此类推。</p>

<h4 id="toc_5">Once（只取一次）</h4>

<p>在场景初始化时更新一次，在一个场景中的所有用户每次迭代值都相同。</p>

]]></content>
  </entry>
  
</feed>
